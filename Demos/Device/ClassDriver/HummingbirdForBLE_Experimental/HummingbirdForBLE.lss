
HummingbirdForBLE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00001dd2  00001e66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001dd2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000255  00800110  00800110  00001e76  2**0
                  ALLOC
  3 .comment      00000041  00000000  00000000  00001e76  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001eb8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000368  00000000  00000000  00001ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006c70  00000000  00000000  00002260  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e1b  00000000  00000000  00008ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000042db  00000000  00000000  0000aceb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a2c  00000000  00000000  0000efc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000026e5  00000000  00000000  0000f9f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003e64  00000000  00000000  000120d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004e0  00000000  00000000  00015f3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b4 c0       	rjmp	.+360    	; 0x16a <__ctors_end>
       2:	00 00       	nop
       4:	ce c0       	rjmp	.+412    	; 0x1a2 <__bad_interrupt>
       6:	00 00       	nop
       8:	cc c0       	rjmp	.+408    	; 0x1a2 <__bad_interrupt>
       a:	00 00       	nop
       c:	ca c0       	rjmp	.+404    	; 0x1a2 <__bad_interrupt>
       e:	00 00       	nop
      10:	c8 c0       	rjmp	.+400    	; 0x1a2 <__bad_interrupt>
      12:	00 00       	nop
      14:	c6 c0       	rjmp	.+396    	; 0x1a2 <__bad_interrupt>
      16:	00 00       	nop
      18:	c4 c0       	rjmp	.+392    	; 0x1a2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c2 c0       	rjmp	.+388    	; 0x1a2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c0 c0       	rjmp	.+384    	; 0x1a2 <__bad_interrupt>
      22:	00 00       	nop
      24:	be c0       	rjmp	.+380    	; 0x1a2 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 92 0a 	jmp	0x1524	; 0x1524 <__vector_10>
      2c:	ba c0       	rjmp	.+372    	; 0x1a2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b8 c0       	rjmp	.+368    	; 0x1a2 <__bad_interrupt>
      32:	00 00       	nop
      34:	b6 c0       	rjmp	.+364    	; 0x1a2 <__bad_interrupt>
      36:	00 00       	nop
      38:	b4 c0       	rjmp	.+360    	; 0x1a2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b2 c0       	rjmp	.+356    	; 0x1a2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b0 c0       	rjmp	.+352    	; 0x1a2 <__bad_interrupt>
      42:	00 00       	nop
      44:	ae c0       	rjmp	.+348    	; 0x1a2 <__bad_interrupt>
      46:	00 00       	nop
      48:	ac c0       	rjmp	.+344    	; 0x1a2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c0       	rjmp	.+340    	; 0x1a2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a8 c0       	rjmp	.+336    	; 0x1a2 <__bad_interrupt>
      52:	00 00       	nop
      54:	8f c2       	rjmp	.+1310   	; 0x574 <__vector_21>
      56:	00 00       	nop
      58:	a4 c0       	rjmp	.+328    	; 0x1a2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	bb c1       	rjmp	.+886    	; 0x3d4 <__vector_23>
      5e:	00 00       	nop
      60:	a0 c0       	rjmp	.+320    	; 0x1a2 <__bad_interrupt>
      62:	00 00       	nop
      64:	6b c1       	rjmp	.+726    	; 0x33c <__vector_25>
      66:	00 00       	nop
      68:	9c c0       	rjmp	.+312    	; 0x1a2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	9a c0       	rjmp	.+308    	; 0x1a2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	98 c0       	rjmp	.+304    	; 0x1a2 <__bad_interrupt>
      72:	00 00       	nop
      74:	96 c0       	rjmp	.+300    	; 0x1a2 <__bad_interrupt>
      76:	00 00       	nop
      78:	94 c0       	rjmp	.+296    	; 0x1a2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	92 c0       	rjmp	.+292    	; 0x1a2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	90 c0       	rjmp	.+288    	; 0x1a2 <__bad_interrupt>
      82:	00 00       	nop
      84:	8e c0       	rjmp	.+284    	; 0x1a2 <__bad_interrupt>
      86:	00 00       	nop
      88:	8c c0       	rjmp	.+280    	; 0x1a2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8a c0       	rjmp	.+276    	; 0x1a2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	88 c0       	rjmp	.+272    	; 0x1a2 <__bad_interrupt>
      92:	00 00       	nop
      94:	86 c0       	rjmp	.+268    	; 0x1a2 <__bad_interrupt>
      96:	00 00       	nop
      98:	84 c0       	rjmp	.+264    	; 0x1a2 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	82 c0       	rjmp	.+260    	; 0x1a2 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	80 c0       	rjmp	.+256    	; 0x1a2 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	7e c0       	rjmp	.+252    	; 0x1a2 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	7c c0       	rjmp	.+248    	; 0x1a2 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	7f 0b       	sbc	r23, r31
      ae:	a1 0b       	sbc	r26, r17
      b0:	88 0c       	add	r8, r8
      b2:	a1 0b       	sbc	r26, r17
      b4:	88 0c       	add	r8, r8
      b6:	e6 0b       	sbc	r30, r22
      b8:	08 0c       	add	r0, r8
      ba:	88 0c       	add	r8, r8
      bc:	5a 0c       	add	r5, r10
      be:	6c 0c       	add	r6, r12

000000c0 <ProductString>:
      c0:	20 03 48 00 75 00 6d 00 6d 00 69 00 6e 00 67 00      .H.u.m.m.i.n.g.
      d0:	62 00 69 00 72 00 64 00 20 00 44 00 75 00 6f 00     b.i.r.d. .D.u.o.
      e0:	00 00                                               ..

000000e2 <ManufacturerString>:
      e2:	2e 03 42 00 69 00 72 00 64 00 42 00 72 00 61 00     ..B.i.r.d.B.r.a.
      f2:	69 00 6e 00 20 00 54 00 65 00 63 00 68 00 6e 00     i.n. .T.e.c.h.n.
     102:	6f 00 6c 00 6f 00 67 00 69 00 65 00 73 00 00 00     o.l.o.g.i.e.s...

00000112 <LanguageString>:
     112:	04 03 09 04                                         ....

00000116 <ConfigurationDescriptor>:
     116:	09 02 22 00 01 01 00 c0 fa 09 04 00 00 01 03 00     ..".............
     126:	00 00 09 21 11 01 00 01 22 20 00 07 05 81 03 08     ...!...." ......
     136:	00 01                                               ..

00000138 <DeviceDescriptor>:
     138:	12 01 10 01 00 00 00 08 54 23 22 22 00 02 01 02     ........T#""....
     148:	00 01                                               ..

0000014a <GenericReport>:
     14a:	06 00 ff 09 01 a1 01 09 02 15 00 25 ff 75 08 95     ...........%.u..
     15a:	08 81 02 09 03 15 00 25 ff 75 08 95 08 91 02 c0     .......%.u......

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf ef       	ldi	r28, 0xFF	; 255
     170:	da e0       	ldi	r29, 0x0A	; 10
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
     176:	11 e0       	ldi	r17, 0x01	; 1
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b1 e0       	ldi	r27, 0x01	; 1
     17c:	e2 ed       	ldi	r30, 0xD2	; 210
     17e:	fd e1       	ldi	r31, 0x1D	; 29
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x10>
     182:	05 90       	lpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	a0 31       	cpi	r26, 0x10	; 16
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0xc>

0000018c <__do_clear_bss>:
     18c:	23 e0       	ldi	r18, 0x03	; 3
     18e:	a0 e1       	ldi	r26, 0x10	; 16
     190:	b1 e0       	ldi	r27, 0x01	; 1
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	a5 36       	cpi	r26, 0x65	; 101
     198:	b2 07       	cpc	r27, r18
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	e5 d2       	rcall	.+1482   	; 0x768 <main>
     19e:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <_exit>

000001a2 <__bad_interrupt>:
     1a2:	2e cf       	rjmp	.-420    	; 0x0 <__vectors>

000001a4 <init_analog>:
	led_values_temp[8] = user;
}

void set_led3(unsigned int user)
{
	led_values_temp[9] = user;
     1a4:	80 e6       	ldi	r24, 0x60	; 96
     1a6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     1aa:	84 e8       	ldi	r24, 0x84	; 132
     1ac:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     1b0:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
     1b4:	83 e7       	ldi	r24, 0x73	; 115
     1b6:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
     1ba:	08 95       	ret

000001bc <read_sensor>:
     1bc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     1c0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     1c4:	80 64       	ori	r24, 0x40	; 64
     1c6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     1ca:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     1ce:	86 fd       	sbrc	r24, 6
     1d0:	fc cf       	rjmp	.-8      	; 0x1ca <read_sensor+0xe>
     1d2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     1d6:	80 61       	ori	r24, 0x10	; 16
     1d8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     1dc:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	08 95       	ret

000001e4 <init_tiny_comm>:
     1e4:	84 b1       	in	r24, 0x04	; 4
     1e6:	86 61       	ori	r24, 0x16	; 22
     1e8:	84 b9       	out	0x04, r24	; 4
     1ea:	85 e5       	ldi	r24, 0x55	; 85
     1ec:	8c bd       	out	0x2c, r24	; 44
     1ee:	2c 9a       	sbi	0x05, 4	; 5
     1f0:	08 95       	ret

000001f2 <transmitByteToTiny>:
     1f2:	2c 98       	cbi	0x05, 4	; 5
     1f4:	9a e6       	ldi	r25, 0x6A	; 106
     1f6:	9a 95       	dec	r25
     1f8:	f1 f7       	brne	.-4      	; 0x1f6 <transmitByteToTiny+0x4>
     1fa:	00 c0       	rjmp	.+0      	; 0x1fc <transmitByteToTiny+0xa>
     1fc:	8e bd       	out	0x2e, r24	; 46
     1fe:	0d b4       	in	r0, 0x2d	; 45
     200:	07 fe       	sbrs	r0, 7
     202:	fd cf       	rjmp	.-6      	; 0x1fe <transmitByteToTiny+0xc>
     204:	85 ed       	ldi	r24, 0xD5	; 213
     206:	8a 95       	dec	r24
     208:	f1 f7       	brne	.-4      	; 0x206 <transmitByteToTiny+0x14>
     20a:	00 00       	nop
     20c:	2c 9a       	sbi	0x05, 4	; 5
     20e:	08 95       	ret

00000210 <turn_off_motors>:
     210:	8e ef       	ldi	r24, 0xFE	; 254
     212:	ef cf       	rjmp	.-34     	; 0x1f2 <transmitByteToTiny>

00000214 <set_motor>:
     214:	0f 93       	push	r16
     216:	1f 93       	push	r17
     218:	cf 93       	push	r28
     21a:	df 93       	push	r29
     21c:	1f 92       	push	r1
     21e:	cd b7       	in	r28, 0x3d	; 61
     220:	de b7       	in	r29, 0x3e	; 62
     222:	18 2f       	mov	r17, r24
     224:	04 2f       	mov	r16, r20
     226:	94 e0       	ldi	r25, 0x04	; 4
     228:	98 0f       	add	r25, r24
     22a:	86 2f       	mov	r24, r22
     22c:	88 0f       	add	r24, r24
     22e:	89 0f       	add	r24, r25
     230:	69 83       	std	Y+1, r22	; 0x01
     232:	df df       	rcall	.-66     	; 0x1f2 <transmitByteToTiny>
     234:	87 ec       	ldi	r24, 0xC7	; 199
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	01 97       	sbiw	r24, 0x01	; 1
     23a:	f1 f7       	brne	.-4      	; 0x238 <set_motor+0x24>
     23c:	00 c0       	rjmp	.+0      	; 0x23e <set_motor+0x2a>
     23e:	00 00       	nop
     240:	80 2f       	mov	r24, r16
     242:	d7 df       	rcall	.-82     	; 0x1f2 <transmitByteToTiny>
     244:	e1 2f       	mov	r30, r17
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	df 01       	movw	r26, r30
     24a:	aa 0f       	add	r26, r26
     24c:	bb 1f       	adc	r27, r27
     24e:	ac 5c       	subi	r26, 0xCC	; 204
     250:	be 4f       	sbci	r27, 0xFE	; 254
     252:	69 81       	ldd	r22, Y+1	; 0x01
     254:	6c 93       	st	X, r22
     256:	11 96       	adiw	r26, 0x01	; 1
     258:	0c 93       	st	X, r16
     25a:	ee 5c       	subi	r30, 0xCE	; 206
     25c:	fe 4f       	sbci	r31, 0xFE	; 254
     25e:	80 2f       	mov	r24, r16
     260:	86 95       	lsr	r24
     262:	61 11       	cpse	r22, r1
     264:	80 58       	subi	r24, 0x80	; 128
     266:	80 83       	st	Z, r24
     268:	0f 90       	pop	r0
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	1f 91       	pop	r17
     270:	0f 91       	pop	r16
     272:	08 95       	ret

00000274 <disable_servos>:
     274:	8f ef       	ldi	r24, 0xFF	; 255
     276:	bd cf       	rjmp	.-134    	; 0x1f2 <transmitByteToTiny>

00000278 <set_servo>:
     278:	cf 93       	push	r28
     27a:	df 93       	push	r29
     27c:	c8 2f       	mov	r28, r24
     27e:	d6 2f       	mov	r29, r22
     280:	b8 df       	rcall	.-144    	; 0x1f2 <transmitByteToTiny>
     282:	87 ec       	ldi	r24, 0xC7	; 199
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	01 97       	sbiw	r24, 0x01	; 1
     288:	f1 f7       	brne	.-4      	; 0x286 <set_servo+0xe>
     28a:	00 c0       	rjmp	.+0      	; 0x28c <set_servo+0x14>
     28c:	00 00       	nop
     28e:	8d 2f       	mov	r24, r29
     290:	b0 df       	rcall	.-160    	; 0x1f2 <transmitByteToTiny>
     292:	ec 2f       	mov	r30, r28
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	e2 5d       	subi	r30, 0xD2	; 210
     298:	fe 4f       	sbci	r31, 0xFE	; 254
     29a:	d0 83       	st	Z, r29
     29c:	df 91       	pop	r29
     29e:	cf 91       	pop	r28
     2a0:	08 95       	ret

000002a2 <serial_init>:
     2a2:	82 e0       	ldi	r24, 0x02	; 2
     2a4:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     2a8:	88 e9       	ldi	r24, 0x98	; 152
     2aa:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
     2ae:	86 e0       	ldi	r24, 0x06	; 6
     2b0:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
     2b4:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <rx_buffer+0x100>
     2b8:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <rx_buffer+0x101>
     2bc:	80 e1       	ldi	r24, 0x10	; 16
     2be:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     2c2:	08 95       	ret

000002c4 <send_char>:
     2c4:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     2c8:	95 ff       	sbrs	r25, 5
     2ca:	fc cf       	rjmp	.-8      	; 0x2c4 <send_char>
     2cc:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     2d0:	08 95       	ret

000002d2 <received_data_available>:
     2d2:	20 91 56 03 	lds	r18, 0x0356	; 0x800356 <rx_buffer+0x100>
     2d6:	90 91 57 03 	lds	r25, 0x0357	; 0x800357 <rx_buffer+0x101>
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	29 13       	cpse	r18, r25
     2de:	01 c0       	rjmp	.+2      	; 0x2e2 <received_data_available+0x10>
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	08 95       	ret

000002e4 <send_sensors>:
     2e4:	86 e6       	ldi	r24, 0x66	; 102
     2e6:	6a df       	rcall	.-300    	; 0x1bc <read_sensor>
     2e8:	ed df       	rcall	.-38     	; 0x2c4 <send_char>
     2ea:	85 e6       	ldi	r24, 0x65	; 101
     2ec:	67 df       	rcall	.-306    	; 0x1bc <read_sensor>
     2ee:	ea df       	rcall	.-44     	; 0x2c4 <send_char>
     2f0:	84 e6       	ldi	r24, 0x64	; 100
     2f2:	64 df       	rcall	.-312    	; 0x1bc <read_sensor>
     2f4:	e7 df       	rcall	.-50     	; 0x2c4 <send_char>
     2f6:	81 e6       	ldi	r24, 0x61	; 97
     2f8:	61 df       	rcall	.-318    	; 0x1bc <read_sensor>
     2fa:	e4 df       	rcall	.-56     	; 0x2c4 <send_char>
     2fc:	80 e6       	ldi	r24, 0x60	; 96
     2fe:	5e df       	rcall	.-324    	; 0x1bc <read_sensor>
     300:	e1 cf       	rjmp	.-62     	; 0x2c4 <send_char>

00000302 <receive_char>:
     302:	a7 e5       	ldi	r26, 0x57	; 87
     304:	b3 e0       	ldi	r27, 0x03	; 3
     306:	ec 91       	ld	r30, X
     308:	f0 e0       	ldi	r31, 0x00	; 0
     30a:	ea 5a       	subi	r30, 0xAA	; 170
     30c:	fd 4f       	sbci	r31, 0xFD	; 253
     30e:	80 81       	ld	r24, Z
     310:	9c 91       	ld	r25, X
     312:	9f 5f       	subi	r25, 0xFF	; 255
     314:	9c 93       	st	X, r25
     316:	08 95       	ret

00000318 <store_received_serial_data>:
     318:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <rx_buffer+0x100>
     31c:	8f 5f       	subi	r24, 0xFF	; 255
     31e:	20 91 57 03 	lds	r18, 0x0357	; 0x800357 <rx_buffer+0x101>
     322:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     326:	82 17       	cp	r24, r18
     328:	41 f0       	breq	.+16     	; 0x33a <store_received_serial_data+0x22>
     32a:	e0 91 56 03 	lds	r30, 0x0356	; 0x800356 <rx_buffer+0x100>
     32e:	f0 e0       	ldi	r31, 0x00	; 0
     330:	ea 5a       	subi	r30, 0xAA	; 170
     332:	fd 4f       	sbci	r31, 0xFD	; 253
     334:	90 83       	st	Z, r25
     336:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <rx_buffer+0x100>
     33a:	08 95       	ret

0000033c <__vector_25>:
     33c:	1f 92       	push	r1
     33e:	0f 92       	push	r0
     340:	0f b6       	in	r0, 0x3f	; 63
     342:	0f 92       	push	r0
     344:	11 24       	eor	r1, r1
     346:	2f 93       	push	r18
     348:	3f 93       	push	r19
     34a:	4f 93       	push	r20
     34c:	5f 93       	push	r21
     34e:	6f 93       	push	r22
     350:	7f 93       	push	r23
     352:	8f 93       	push	r24
     354:	9f 93       	push	r25
     356:	af 93       	push	r26
     358:	bf 93       	push	r27
     35a:	ef 93       	push	r30
     35c:	ff 93       	push	r31
     35e:	dc df       	rcall	.-72     	; 0x318 <store_received_serial_data>
     360:	ff 91       	pop	r31
     362:	ef 91       	pop	r30
     364:	bf 91       	pop	r27
     366:	af 91       	pop	r26
     368:	9f 91       	pop	r25
     36a:	8f 91       	pop	r24
     36c:	7f 91       	pop	r23
     36e:	6f 91       	pop	r22
     370:	5f 91       	pop	r21
     372:	4f 91       	pop	r20
     374:	3f 91       	pop	r19
     376:	2f 91       	pop	r18
     378:	0f 90       	pop	r0
     37a:	0f be       	out	0x3f, r0	; 63
     37c:	0f 90       	pop	r0
     37e:	1f 90       	pop	r1
     380:	18 95       	reti

00000382 <set_vibration_motor>:
     382:	26 2f       	mov	r18, r22
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	80 33       	cpi	r24, 0x30	; 48
     388:	39 f4       	brne	.+14     	; 0x398 <set_vibration_motor+0x16>
     38a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     38e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     392:	60 93 2c 01 	sts	0x012C, r22	; 0x80012c <vbr_values_temp>
     396:	08 95       	ret
     398:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     39c:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     3a0:	60 93 2d 01 	sts	0x012D, r22	; 0x80012d <vbr_values_temp+0x1>
     3a4:	08 95       	ret

000003a6 <disable_vibration_motors>:
     3a6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     3aa:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     3ae:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     3b2:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     3b6:	ec e2       	ldi	r30, 0x2C	; 44
     3b8:	f1 e0       	ldi	r31, 0x01	; 1
     3ba:	10 82       	st	Z, r1
     3bc:	11 82       	std	Z+1, r1	; 0x01
     3be:	08 95       	ret

000003c0 <init_vbr>:
     3c0:	81 ea       	ldi	r24, 0xA1	; 161
     3c2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     3c6:	89 e0       	ldi	r24, 0x09	; 9
     3c8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     3cc:	84 b1       	in	r24, 0x04	; 4
     3ce:	80 66       	ori	r24, 0x60	; 96
     3d0:	84 b9       	out	0x04, r24	; 4
     3d2:	e9 cf       	rjmp	.-46     	; 0x3a6 <disable_vibration_motors>

000003d4 <__vector_23>:
     3d4:	1f 92       	push	r1
     3d6:	0f 92       	push	r0
     3d8:	0f b6       	in	r0, 0x3f	; 63
     3da:	0f 92       	push	r0
     3dc:	11 24       	eor	r1, r1
     3de:	8f 93       	push	r24
     3e0:	9f 93       	push	r25
     3e2:	af 93       	push	r26
     3e4:	bf 93       	push	r27
     3e6:	cf 93       	push	r28
     3e8:	df 93       	push	r29
     3ea:	ef 93       	push	r30
     3ec:	ff 93       	push	r31
     3ee:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <activity_state>
     3f2:	81 11       	cpse	r24, r1
     3f4:	24 c0       	rjmp	.+72     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     3f6:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <activity_val>
     3fa:	85 31       	cpi	r24, 0x15	; 21
     3fc:	18 f0       	brcs	.+6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     3fe:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <led_values_temp+0xa>
     402:	02 c0       	rjmp	.+4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     404:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <led_values_temp+0xa>
     408:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <activity_dir>
     40c:	91 11       	cpse	r25, r1
     40e:	02 c0       	rjmp	.+4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     410:	8f 5f       	subi	r24, 0xFF	; 255
     412:	01 c0       	rjmp	.+2      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     414:	81 50       	subi	r24, 0x01	; 1
     416:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <activity_val>
     41a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <activity_val>
     41e:	8e 3f       	cpi	r24, 0xFE	; 254
     420:	20 f0       	brcs	.+8      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <activity_dir>
     428:	04 c0       	rjmp	.+8      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     42a:	83 30       	cpi	r24, 0x03	; 3
     42c:	10 f4       	brcc	.+4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     42e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <activity_dir>
     432:	a6 e1       	ldi	r26, 0x16	; 22
     434:	b1 e0       	ldi	r27, 0x01	; 1
     436:	e1 e2       	ldi	r30, 0x21	; 33
     438:	f1 e0       	ldi	r31, 0x01	; 1
     43a:	ef 01       	movw	r28, r30
     43c:	06 c0       	rjmp	.+12     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     43e:	81 30       	cpi	r24, 0x01	; 1
     440:	c1 f7       	brne	.-16     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     442:	8f ef       	ldi	r24, 0xFF	; 255
     444:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <led_values_temp+0xa>
     448:	f4 cf       	rjmp	.-24     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     44a:	8d 91       	ld	r24, X+
     44c:	89 93       	st	Y+, r24
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	a1 32       	cpi	r26, 0x21	; 33
     452:	b8 07       	cpc	r27, r24
     454:	d1 f7       	brne	.-12     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     456:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <led_values>
     45a:	88 23       	and	r24, r24
     45c:	11 f0       	breq	.+4      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     45e:	76 9a       	sbi	0x0e, 6	; 14
     460:	04 c0       	rjmp	.+8      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     462:	76 98       	cbi	0x0e, 6	; 14
     464:	8f ef       	ldi	r24, 0xFF	; 255
     466:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <led_values>
     46a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <led_values+0x1>
     46e:	88 23       	and	r24, r24
     470:	11 f0       	breq	.+4      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     472:	5c 9a       	sbi	0x0b, 4	; 11
     474:	04 c0       	rjmp	.+8      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     476:	5c 98       	cbi	0x0b, 4	; 11
     478:	8f ef       	ldi	r24, 0xFF	; 255
     47a:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <led_values+0x1>
     47e:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <led_values+0x2>
     482:	88 23       	and	r24, r24
     484:	11 f0       	breq	.+4      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     486:	5e 9a       	sbi	0x0b, 6	; 11
     488:	04 c0       	rjmp	.+8      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     48a:	5e 98       	cbi	0x0b, 6	; 11
     48c:	8f ef       	ldi	r24, 0xFF	; 255
     48e:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <led_values+0x2>
     492:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <led_values+0x3>
     496:	88 23       	and	r24, r24
     498:	11 f0       	breq	.+4      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     49a:	46 9a       	sbi	0x08, 6	; 8
     49c:	04 c0       	rjmp	.+8      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     49e:	46 98       	cbi	0x08, 6	; 8
     4a0:	8f ef       	ldi	r24, 0xFF	; 255
     4a2:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <led_values+0x3>
     4a6:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <led_values+0x4>
     4aa:	88 23       	and	r24, r24
     4ac:	11 f0       	breq	.+4      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
     4ae:	5f 9a       	sbi	0x0b, 7	; 11
     4b0:	04 c0       	rjmp	.+8      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     4b2:	5f 98       	cbi	0x0b, 7	; 11
     4b4:	8f ef       	ldi	r24, 0xFF	; 255
     4b6:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <led_values+0x4>
     4ba:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <led_values+0x5>
     4be:	88 23       	and	r24, r24
     4c0:	11 f0       	breq	.+4      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     4c2:	2f 9a       	sbi	0x05, 7	; 5
     4c4:	04 c0       	rjmp	.+8      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     4c6:	2f 98       	cbi	0x05, 7	; 5
     4c8:	8f ef       	ldi	r24, 0xFF	; 255
     4ca:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <led_values+0x5>
     4ce:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <led_values+0x6>
     4d2:	88 23       	and	r24, r24
     4d4:	11 f0       	breq	.+4      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     4d6:	58 9a       	sbi	0x0b, 0	; 11
     4d8:	04 c0       	rjmp	.+8      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
     4da:	58 98       	cbi	0x0b, 0	; 11
     4dc:	8f ef       	ldi	r24, 0xFF	; 255
     4de:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <led_values+0x6>
     4e2:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <led_values+0x7>
     4e6:	88 23       	and	r24, r24
     4e8:	11 f0       	breq	.+4      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     4ea:	59 9a       	sbi	0x0b, 1	; 11
     4ec:	04 c0       	rjmp	.+8      	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
     4ee:	59 98       	cbi	0x0b, 1	; 11
     4f0:	8f ef       	ldi	r24, 0xFF	; 255
     4f2:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <led_values+0x7>
     4f6:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <led_values+0x8>
     4fa:	88 23       	and	r24, r24
     4fc:	11 f0       	breq	.+4      	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
     4fe:	72 9a       	sbi	0x0e, 2	; 14
     500:	04 c0       	rjmp	.+8      	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
     502:	72 98       	cbi	0x0e, 2	; 14
     504:	8f ef       	ldi	r24, 0xFF	; 255
     506:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <led_values+0x8>
     50a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <led_values+0x9>
     50e:	88 23       	and	r24, r24
     510:	11 f0       	breq	.+4      	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     512:	8f 9a       	sbi	0x11, 7	; 17
     514:	04 c0       	rjmp	.+8      	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
     516:	8f 98       	cbi	0x11, 7	; 17
     518:	8f ef       	ldi	r24, 0xFF	; 255
     51a:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <led_values+0x9>
     51e:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <led_values+0xa>
     522:	88 23       	and	r24, r24
     524:	11 f0       	breq	.+4      	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
     526:	47 9a       	sbi	0x08, 7	; 8
     528:	04 c0       	rjmp	.+8      	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
     52a:	47 98       	cbi	0x08, 7	; 8
     52c:	8f ef       	ldi	r24, 0xFF	; 255
     52e:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <led_values+0xa>
     532:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <next_led_val>
     536:	91 91       	ld	r25, Z+
     538:	98 17       	cp	r25, r24
     53a:	08 f4       	brcc	.+2      	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
     53c:	89 2f       	mov	r24, r25
     53e:	91 e0       	ldi	r25, 0x01	; 1
     540:	ec 32       	cpi	r30, 0x2C	; 44
     542:	f9 07       	cpc	r31, r25
     544:	c1 f7       	brne	.-16     	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
     546:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <next_led_val>
     54a:	87 bd       	out	0x27, r24	; 39
     54c:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <__data_end>
     550:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <sensor_broadcast>
     554:	89 0f       	add	r24, r25
     556:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
     55a:	ff 91       	pop	r31
     55c:	ef 91       	pop	r30
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	bf 91       	pop	r27
     564:	af 91       	pop	r26
     566:	9f 91       	pop	r25
     568:	8f 91       	pop	r24
     56a:	0f 90       	pop	r0
     56c:	0f be       	out	0x3f, r0	; 63
     56e:	0f 90       	pop	r0
     570:	1f 90       	pop	r1
     572:	18 95       	reti

00000574 <__vector_21>:
     574:	1f 92       	push	r1
     576:	0f 92       	push	r0
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	0f 92       	push	r0
     57c:	11 24       	eor	r1, r1
     57e:	8f 93       	push	r24
     580:	9f 93       	push	r25
     582:	ef 93       	push	r30
     584:	ff 93       	push	r31
     586:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <next_led_val>
     58a:	8f 3f       	cpi	r24, 0xFF	; 255
     58c:	09 f4       	brne	.+2      	; 0x590 <__vector_21+0x1c>
     58e:	7a c0       	rjmp	.+244    	; 0x684 <__vector_21+0x110>
     590:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <led_values>
     594:	98 13       	cpse	r25, r24
     596:	04 c0       	rjmp	.+8      	; 0x5a0 <__vector_21+0x2c>
     598:	76 98       	cbi	0x0e, 6	; 14
     59a:	8f ef       	ldi	r24, 0xFF	; 255
     59c:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <led_values>
     5a0:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <led_values+0x1>
     5a4:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <next_led_val>
     5a8:	98 13       	cpse	r25, r24
     5aa:	04 c0       	rjmp	.+8      	; 0x5b4 <__vector_21+0x40>
     5ac:	5c 98       	cbi	0x0b, 4	; 11
     5ae:	8f ef       	ldi	r24, 0xFF	; 255
     5b0:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <led_values+0x1>
     5b4:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <led_values+0x2>
     5b8:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <next_led_val>
     5bc:	98 13       	cpse	r25, r24
     5be:	04 c0       	rjmp	.+8      	; 0x5c8 <__vector_21+0x54>
     5c0:	5e 98       	cbi	0x0b, 6	; 11
     5c2:	8f ef       	ldi	r24, 0xFF	; 255
     5c4:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <led_values+0x2>
     5c8:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <led_values+0x3>
     5cc:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <next_led_val>
     5d0:	98 13       	cpse	r25, r24
     5d2:	04 c0       	rjmp	.+8      	; 0x5dc <__vector_21+0x68>
     5d4:	46 98       	cbi	0x08, 6	; 8
     5d6:	8f ef       	ldi	r24, 0xFF	; 255
     5d8:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <led_values+0x3>
     5dc:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <led_values+0x4>
     5e0:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <next_led_val>
     5e4:	98 13       	cpse	r25, r24
     5e6:	04 c0       	rjmp	.+8      	; 0x5f0 <__vector_21+0x7c>
     5e8:	5f 98       	cbi	0x0b, 7	; 11
     5ea:	8f ef       	ldi	r24, 0xFF	; 255
     5ec:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <led_values+0x4>
     5f0:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <led_values+0x5>
     5f4:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <next_led_val>
     5f8:	98 13       	cpse	r25, r24
     5fa:	04 c0       	rjmp	.+8      	; 0x604 <__vector_21+0x90>
     5fc:	2f 98       	cbi	0x05, 7	; 5
     5fe:	8f ef       	ldi	r24, 0xFF	; 255
     600:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <led_values+0x5>
     604:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <led_values+0x6>
     608:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <next_led_val>
     60c:	98 13       	cpse	r25, r24
     60e:	04 c0       	rjmp	.+8      	; 0x618 <__vector_21+0xa4>
     610:	58 98       	cbi	0x0b, 0	; 11
     612:	8f ef       	ldi	r24, 0xFF	; 255
     614:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <led_values+0x6>
     618:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <led_values+0x7>
     61c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <next_led_val>
     620:	98 13       	cpse	r25, r24
     622:	04 c0       	rjmp	.+8      	; 0x62c <__vector_21+0xb8>
     624:	59 98       	cbi	0x0b, 1	; 11
     626:	8f ef       	ldi	r24, 0xFF	; 255
     628:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <led_values+0x7>
     62c:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <led_values+0x8>
     630:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <next_led_val>
     634:	98 13       	cpse	r25, r24
     636:	04 c0       	rjmp	.+8      	; 0x640 <__vector_21+0xcc>
     638:	72 98       	cbi	0x0e, 2	; 14
     63a:	8f ef       	ldi	r24, 0xFF	; 255
     63c:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <led_values+0x8>
     640:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <led_values+0x9>
     644:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <next_led_val>
     648:	98 13       	cpse	r25, r24
     64a:	04 c0       	rjmp	.+8      	; 0x654 <__vector_21+0xe0>
     64c:	8f 98       	cbi	0x11, 7	; 17
     64e:	8f ef       	ldi	r24, 0xFF	; 255
     650:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <led_values+0x9>
     654:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <led_values+0xa>
     658:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <next_led_val>
     65c:	98 13       	cpse	r25, r24
     65e:	04 c0       	rjmp	.+8      	; 0x668 <__vector_21+0xf4>
     660:	47 98       	cbi	0x08, 7	; 8
     662:	8f ef       	ldi	r24, 0xFF	; 255
     664:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <led_values+0xa>
     668:	e1 e2       	ldi	r30, 0x21	; 33
     66a:	f1 e0       	ldi	r31, 0x01	; 1
     66c:	8f ef       	ldi	r24, 0xFF	; 255
     66e:	91 91       	ld	r25, Z+
     670:	98 17       	cp	r25, r24
     672:	08 f4       	brcc	.+2      	; 0x676 <__vector_21+0x102>
     674:	89 2f       	mov	r24, r25
     676:	91 e0       	ldi	r25, 0x01	; 1
     678:	ec 32       	cpi	r30, 0x2C	; 44
     67a:	f9 07       	cpc	r31, r25
     67c:	c1 f7       	brne	.-16     	; 0x66e <__vector_21+0xfa>
     67e:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <next_led_val>
     682:	87 bd       	out	0x27, r24	; 39
     684:	ff 91       	pop	r31
     686:	ef 91       	pop	r30
     688:	9f 91       	pop	r25
     68a:	8f 91       	pop	r24
     68c:	0f 90       	pop	r0
     68e:	0f be       	out	0x3f, r0	; 63
     690:	0f 90       	pop	r0
     692:	1f 90       	pop	r1
     694:	18 95       	reti

00000696 <init_orb>:
     696:	14 bc       	out	0x24, r1	; 36
     698:	84 e0       	ldi	r24, 0x04	; 4
     69a:	85 bd       	out	0x25, r24	; 37
     69c:	83 e0       	ldi	r24, 0x03	; 3
     69e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
     6a2:	27 9a       	sbi	0x04, 7	; 4
     6a4:	87 b1       	in	r24, 0x07	; 7
     6a6:	80 6c       	ori	r24, 0xC0	; 192
     6a8:	87 b9       	out	0x07, r24	; 7
     6aa:	8a b1       	in	r24, 0x0a	; 10
     6ac:	83 6d       	ori	r24, 0xD3	; 211
     6ae:	8a b9       	out	0x0a, r24	; 10
     6b0:	8d b1       	in	r24, 0x0d	; 13
     6b2:	84 64       	ori	r24, 0x44	; 68
     6b4:	8d b9       	out	0x0d, r24	; 13
     6b6:	87 9a       	sbi	0x10, 7	; 16
     6b8:	08 95       	ret

000006ba <set_orb>:
     6ba:	81 33       	cpi	r24, 0x31	; 49
     6bc:	39 f4       	brne	.+14     	; 0x6cc <set_orb+0x12>
     6be:	60 93 19 01 	sts	0x0119, r22	; 0x800119 <led_values_temp+0x3>
     6c2:	40 93 1a 01 	sts	0x011A, r20	; 0x80011a <led_values_temp+0x4>
     6c6:	20 93 1b 01 	sts	0x011B, r18	; 0x80011b <led_values_temp+0x5>
     6ca:	08 95       	ret
     6cc:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <led_values_temp>
     6d0:	40 93 17 01 	sts	0x0117, r20	; 0x800117 <led_values_temp+0x1>
     6d4:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <led_values_temp+0x2>
     6d8:	08 95       	ret

000006da <set_led>:
     6da:	81 33       	cpi	r24, 0x31	; 49
     6dc:	61 f0       	breq	.+24     	; 0x6f6 <set_led+0x1c>
     6de:	18 f4       	brcc	.+6      	; 0x6e6 <set_led+0xc>
     6e0:	80 33       	cpi	r24, 0x30	; 48
     6e2:	31 f0       	breq	.+12     	; 0x6f0 <set_led+0x16>
     6e4:	08 95       	ret
     6e6:	82 33       	cpi	r24, 0x32	; 50
     6e8:	49 f0       	breq	.+18     	; 0x6fc <set_led+0x22>
     6ea:	83 33       	cpi	r24, 0x33	; 51
     6ec:	51 f0       	breq	.+20     	; 0x702 <set_led+0x28>
     6ee:	08 95       	ret
     6f0:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <led_values_temp+0x6>
     6f4:	08 95       	ret
     6f6:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <led_values_temp+0x7>
     6fa:	08 95       	ret
     6fc:	60 93 1e 01 	sts	0x011E, r22	; 0x80011e <led_values_temp+0x8>
     700:	08 95       	ret
     702:	60 93 1f 01 	sts	0x011F, r22	; 0x80011f <led_values_temp+0x9>
     706:	08 95       	ret

00000708 <turn_off_leds>:
}

// Sets the red, green and blue elements of the first LED with 8-bit resolution
void set_orb0(unsigned int red_led, unsigned int green_led, unsigned int blue_led)
{
	led_values_temp[0] = red_led;
     708:	e6 e1       	ldi	r30, 0x16	; 22
     70a:	f1 e0       	ldi	r31, 0x01	; 1
     70c:	10 82       	st	Z, r1
	led_values_temp[1] = green_led;
     70e:	11 82       	std	Z+1, r1	; 0x01
	led_values_temp[2] = blue_led;
     710:	12 82       	std	Z+2, r1	; 0x02
}

// Sets the red, green and blue elements of the second LED with 8-bit resolution
void set_orb1(unsigned int red_led, unsigned int green_led, unsigned int blue_led)
{
	led_values_temp[3] = red_led;
     712:	13 82       	std	Z+3, r1	; 0x03
	led_values_temp[4] = green_led;
     714:	14 82       	std	Z+4, r1	; 0x04
	led_values_temp[5] = blue_led;
     716:	15 82       	std	Z+5, r1	; 0x05
	}
}

void set_led0(unsigned int user)
{
	led_values_temp[6] = user;
     718:	16 82       	std	Z+6, r1	; 0x06
}

void set_led1(unsigned int user)
{
	led_values_temp[7] = user;
     71a:	17 82       	std	Z+7, r1	; 0x07
}

void set_led2(unsigned int user)
{
	led_values_temp[8] = user;
     71c:	10 86       	std	Z+8, r1	; 0x08
}

void set_led3(unsigned int user)
{
	led_values_temp[9] = user;
     71e:	11 86       	std	Z+9, r1	; 0x09
     720:	08 95       	ret

00000722 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     722:	84 b7       	in	r24, 0x34	; 52
     724:	87 7f       	andi	r24, 0xF7	; 247
     726:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     728:	0f b6       	in	r0, 0x3f	; 63
     72a:	f8 94       	cli
     72c:	a8 95       	wdr
     72e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     732:	88 61       	ori	r24, 0x18	; 24
     734:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     738:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     73c:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	80 e8       	ldi	r24, 0x80	; 128
     742:	0f b6       	in	r0, 0x3f	; 63
     744:	f8 94       	cli
     746:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     74a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     74e:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRB  |=  LEDS_PORTB_LEDS;
     750:	20 9a       	sbi	0x04, 0	; 4
				PORTB |=  LEDS_PORTB_LEDS;
     752:	28 9a       	sbi	0x05, 0	; 5
				DDRD  |=  LEDS_PORTD_LEDS;
     754:	55 9a       	sbi	0x0a, 5	; 10
				PORTD |=  LEDS_PORTD_LEDS;
     756:	5d 9a       	sbi	0x0b, 5	; 11
				DDRC  |=  LEDS_PORTC_LEDS;
     758:	3f 9a       	sbi	0x07, 7	; 7
				PORTC &= ~LEDS_PORTC_LEDS;
     75a:	47 98       	cbi	0x08, 7	; 8
	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	LEDs_Init();
	init_analog();
     75c:	23 dd       	rcall	.-1466   	; 0x1a4 <init_analog>
	init_orb();
     75e:	9b df       	rcall	.-202    	; 0x696 <init_orb>
	init_vbr();
     760:	2f de       	rcall	.-930    	; 0x3c0 <init_vbr>
	init_tiny_comm();
     762:	40 dd       	rcall	.-1408   	; 0x1e4 <init_tiny_comm>
	serial_init();
     764:	9e dd       	rcall	.-1220   	; 0x2a2 <serial_init>
	USB_Init();
     766:	c1 c6       	rjmp	.+3458   	; 0x14ea <USB_Init>

00000768 <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
     76c:	cd b7       	in	r28, 0x3d	; 61
     76e:	de b7       	in	r29, 0x3e	; 62
     770:	6a 97       	sbiw	r28, 0x1a	; 26
     772:	0f b6       	in	r0, 0x3f	; 63
     774:	f8 94       	cli
     776:	de bf       	out	0x3e, r29	; 62
     778:	0f be       	out	0x3f, r0	; 63
     77a:	cd bf       	out	0x3d, r28	; 61
	unsigned long int exit_count = 0;
	unsigned long int max_count = 500000;
	uint8_t timeout = 0;
	char usb_data; // Flag that marks if usb_data is received

	SetupHardware();
     77c:	d2 df       	rcall	.-92     	; 0x722 <SetupHardware>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     77e:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     780:	2f ef       	ldi	r18, 0xFF	; 255
     782:	84 e3       	ldi	r24, 0x34	; 52
     784:	9c e0       	ldi	r25, 0x0C	; 12
     786:	21 50       	subi	r18, 0x01	; 1
     788:	80 40       	sbci	r24, 0x00	; 0
     78a:	90 40       	sbci	r25, 0x00	; 0
     78c:	e1 f7       	brne	.-8      	; 0x786 <main+0x1e>
     78e:	00 c0       	rjmp	.+0      	; 0x790 <main+0x28>
     790:	00 00       	nop
	char serial_data[20]; // Buffer to hold serial commands send over TTL serial port

	// Counter to set a time-out after which Hummingbird reverts to idle state (indicated by status LED fading on and off)
	unsigned long int exit_count = 0;
	unsigned long int max_count = 500000;
	uint8_t timeout = 0;
     792:	10 e0       	ldi	r17, 0x00	; 0
	int count = 0; // Counter variable
	char serial_data[20]; // Buffer to hold serial commands send over TTL serial port

	// Counter to set a time-out after which Hummingbird reverts to idle state (indicated by status LED fading on and off)
	unsigned long int exit_count = 0;
	unsigned long int max_count = 500000;
     794:	a0 e2       	ldi	r26, 0x20	; 32
     796:	4a 2e       	mov	r4, r26
     798:	a1 ea       	ldi	r26, 0xA1	; 161
     79a:	5a 2e       	mov	r5, r26
     79c:	a7 e0       	ldi	r26, 0x07	; 7
     79e:	6a 2e       	mov	r6, r26
     7a0:	71 2c       	mov	r7, r1
{
	int count = 0; // Counter variable
	char serial_data[20]; // Buffer to hold serial commands send over TTL serial port

	// Counter to set a time-out after which Hummingbird reverts to idle state (indicated by status LED fading on and off)
	unsigned long int exit_count = 0;
     7a2:	c1 2c       	mov	r12, r1
     7a4:	d1 2c       	mov	r13, r1
     7a6:	76 01       	movw	r14, r12
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	int count = 0; // Counter variable
     7a8:	a1 2c       	mov	r10, r1
     7aa:	b1 2c       	mov	r11, r1
     7ac:	fe 01       	movw	r30, r28
     7ae:	34 96       	adiw	r30, 0x04	; 4
     7b0:	fe 8b       	std	Y+22, r31	; 0x16
     7b2:	ed 8b       	std	Y+21, r30	; 0x15
     7b4:	ce 01       	movw	r24, r28
     7b6:	05 96       	adiw	r24, 0x05	; 5
     7b8:	98 8f       	std	Y+24, r25	; 0x18
     7ba:	8f 8b       	std	Y+23, r24	; 0x17
     7bc:	1e 01       	movw	r2, r28
     7be:	96 e0       	ldi	r25, 0x06	; 6
     7c0:	29 0e       	add	r2, r25
     7c2:	31 1c       	adc	r3, r1
     7c4:	70 96       	adiw	r30, 0x10	; 16
     7c6:	fa 8f       	std	Y+26, r31	; 0x1a
     7c8:	e9 8f       	std	Y+25, r30	; 0x19
	//init_BLE_name();

	for (;;)
	{
		// Necessary LUFA library calls that need be run periodically to check USB for data
		HID_Device_USBTask(&Generic_HID_Interface);
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	91 e0       	ldi	r25, 0x01	; 1
     7ce:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <HID_Device_USBTask>
		USB_USBTask();
     7d2:	0e 94 a1 0c 	call	0x1942	; 0x1942 <USB_USBTask>

		if(sensor_broadcast_count > 30)
     7d6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
     7da:	8f 31       	cpi	r24, 0x1F	; 31
     7dc:	18 f0       	brcs	.+6      	; 0x7e4 <main+0x7c>
		{
			sensor_broadcast_count = 0;
     7de:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
			send_sensors();
     7e2:	80 dd       	rcall	.-1280   	; 0x2e4 <send_sensors>
		}

		// If we reach an idle timer count of 500,000 (in USB mode) or 5 million (in serial mode), ~5 (or 50) seconds has elapsed and we turn everything off and go back to idle mode
		if(exit_count == max_count && exit_count <= max_count+5) {
     7e4:	c4 14       	cp	r12, r4
     7e6:	d5 04       	cpc	r13, r5
     7e8:	e6 04       	cpc	r14, r6
     7ea:	f7 04       	cpc	r15, r7
     7ec:	99 f4       	brne	.+38     	; 0x814 <main+0xac>
     7ee:	fb ef       	ldi	r31, 0xFB	; 251
     7f0:	cf 16       	cp	r12, r31
     7f2:	ff ef       	ldi	r31, 0xFF	; 255
     7f4:	df 06       	cpc	r13, r31
     7f6:	ef 06       	cpc	r14, r31
     7f8:	ff 06       	cpc	r15, r31
     7fa:	b0 f4       	brcc	.+44     	; 0x828 <main+0xc0>
			turn_off_motors();
     7fc:	09 dd       	rcall	.-1518   	; 0x210 <turn_off_motors>
			turn_off_leds();
     7fe:	84 df       	rcall	.-248    	; 0x708 <turn_off_leds>
			disable_servos();
     800:	39 dd       	rcall	.-1422   	; 0x274 <disable_servos>
			disable_vibration_motors();
     802:	d1 dd       	rcall	.-1118   	; 0x3a6 <disable_vibration_motors>
			activity_state = 0; // Idle mode flag
     804:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <activity_state>
			exit_count++;
     808:	2f ef       	ldi	r18, 0xFF	; 255
     80a:	c2 1a       	sub	r12, r18
     80c:	d2 0a       	sbc	r13, r18
     80e:	e2 0a       	sbc	r14, r18
     810:	f2 0a       	sbc	r15, r18
     812:	0a c0       	rjmp	.+20     	; 0x828 <main+0xc0>
		}
		// Otherwise count up!
		else if(exit_count < max_count) {
     814:	c4 14       	cp	r12, r4
     816:	d5 04       	cpc	r13, r5
     818:	e6 04       	cpc	r14, r6
     81a:	f7 04       	cpc	r15, r7
     81c:	28 f4       	brcc	.+10     	; 0x828 <main+0xc0>
			exit_count++;
     81e:	8f ef       	ldi	r24, 0xFF	; 255
     820:	c8 1a       	sub	r12, r24
     822:	d8 0a       	sbc	r13, r24
     824:	e8 0a       	sbc	r14, r24
     826:	f8 0a       	sbc	r15, r24
		}

		// Check if we've received data over serial, this is experimental
		if(received_data_available()!=0)
     828:	54 dd       	rcall	.-1368   	; 0x2d2 <received_data_available>
     82a:	88 23       	and	r24, r24
     82c:	09 f4       	brne	.+2      	; 0x830 <main+0xc8>
     82e:	7a c2       	rjmp	.+1268   	; 0xd24 <__stack+0x225>
		{
			max_count = 5000000; // Set the time out to 5,000,000, so now we time out in 50 seconds instead of 5
			serial_data[0] = receive_char();
     830:	68 dd       	rcall	.-1328   	; 0x302 <receive_char>
			
			
			
			switch(serial_data[0]) {
     832:	82 35       	cpi	r24, 0x52	; 82
     834:	09 f4       	brne	.+2      	; 0x838 <main+0xd0>
     836:	a6 c1       	rjmp	.+844    	; 0xb84 <__stack+0x85>
     838:	d0 f4       	brcc	.+52     	; 0x86e <main+0x106>
     83a:	8c 34       	cpi	r24, 0x4C	; 76
     83c:	09 f4       	brne	.+2      	; 0x840 <main+0xd8>
     83e:	c9 c0       	rjmp	.+402    	; 0x9d2 <main+0x26a>
     840:	48 f4       	brcc	.+18     	; 0x854 <main+0xec>
     842:	81 34       	cpi	r24, 0x41	; 65
     844:	99 f1       	breq	.+102    	; 0x8ac <main+0x144>
     846:	87 34       	cpi	r24, 0x47	; 71
     848:	09 f0       	breq	.+2      	; 0x84c <main+0xe4>
     84a:	b1 c1       	rjmp	.+866    	; 0xbae <__stack+0xaf>
				sensor_broadcast = 0;
				sensor_broadcast_count = 0;
				exit_count = 0;
				break;
				case 'G':
				activity_state=1;
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <activity_state>
				while(!received_data_available() && timeout < 250) {
     852:	a8 c1       	rjmp	.+848    	; 0xba4 <__stack+0xa5>
			max_count = 5000000; // Set the time out to 5,000,000, so now we time out in 50 seconds instead of 5
			serial_data[0] = receive_char();
			
			
			
			switch(serial_data[0]) {
     854:	8d 34       	cpi	r24, 0x4D	; 77
     856:	09 f4       	brne	.+2      	; 0x85a <main+0xf2>
     858:	e2 c0       	rjmp	.+452    	; 0xa1e <main+0x2b6>
     85a:	8f 34       	cpi	r24, 0x4F	; 79
     85c:	09 f0       	breq	.+2      	; 0x860 <main+0xf8>
     85e:	a7 c1       	rjmp	.+846    	; 0xbae <__stack+0xaf>
					exit_count = 0;  // Reset time-out counter
				}
				break;
				// If O, set an RGB LED using 4 bytes of serial data
				case 'O':
				activity_state=1;
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <activity_state>
     866:	fe 01       	movw	r30, r28
     868:	32 96       	adiw	r30, 0x02	; 2
     86a:	4f 01       	movw	r8, r30
     86c:	86 c0       	rjmp	.+268    	; 0x97a <main+0x212>
			max_count = 5000000; // Set the time out to 5,000,000, so now we time out in 50 seconds instead of 5
			serial_data[0] = receive_char();
			
			
			
			switch(serial_data[0]) {
     86e:	88 35       	cpi	r24, 0x58	; 88
     870:	09 f4       	brne	.+2      	; 0x874 <main+0x10c>
     872:	84 c1       	rjmp	.+776    	; 0xb7c <__stack+0x7d>
     874:	68 f4       	brcc	.+26     	; 0x890 <main+0x128>
     876:	83 35       	cpi	r24, 0x53	; 83
     878:	09 f4       	brne	.+2      	; 0x87c <main+0x114>
     87a:	18 c1       	rjmp	.+560    	; 0xaac <main+0x344>
     87c:	86 35       	cpi	r24, 0x56	; 86
     87e:	09 f0       	breq	.+2      	; 0x882 <main+0x11a>
     880:	96 c1       	rjmp	.+812    	; 0xbae <__stack+0xaf>
					exit_count = 0;  // Reset time-out counter
				}
				break;
				// If 'V', use bytes 1-2 to set vibration motor intensity
				case 'V':
				activity_state=1;
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <activity_state>
     888:	fe 01       	movw	r30, r28
     88a:	32 96       	adiw	r30, 0x02	; 2
     88c:	4f 01       	movw	r8, r30
     88e:	ef c0       	rjmp	.+478    	; 0xa6e <main+0x306>
			max_count = 5000000; // Set the time out to 5,000,000, so now we time out in 50 seconds instead of 5
			serial_data[0] = receive_char();
			
			
			
			switch(serial_data[0]) {
     890:	84 37       	cpi	r24, 0x74	; 116
     892:	09 f4       	brne	.+2      	; 0x896 <main+0x12e>
     894:	44 c1       	rjmp	.+648    	; 0xb1e <__stack+0x1f>
     896:	8a 37       	cpi	r24, 0x7A	; 122
     898:	09 f4       	brne	.+2      	; 0x89c <main+0x134>
     89a:	29 c2       	rjmp	.+1106   	; 0xcee <__stack+0x1ef>
     89c:	83 37       	cpi	r24, 0x73	; 115
     89e:	09 f0       	breq	.+2      	; 0x8a2 <main+0x13a>
     8a0:	86 c1       	rjmp	.+780    	; 0xbae <__stack+0xaf>
					exit_count = 0;
				}
				break;
				// If 's', return sensor values of the selected sensor port
				case 's':
				activity_state=1;
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <activity_state>
				timeout = 0; //added here 
     8a8:	10 e0       	ldi	r17, 0x00	; 0
				while(!received_data_available() && timeout < 250) {
     8aa:	30 c1       	rjmp	.+608    	; 0xb0c <__stack+0xd>
			
			
			switch(serial_data[0]) {
				// If A, set ALL outputs using 18 bytes of serial data
				case 'A':
				activity_state=1;
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <activity_state>
     8b2:	fe 01       	movw	r30, r28
     8b4:	32 96       	adiw	r30, 0x02	; 2
     8b6:	4f 01       	movw	r8, r30
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	int count = 0; // Counter variable
     8b8:	10 e0       	ldi	r17, 0x00	; 0
				activity_state=1;
				for(int t = 1; t < 19; t++)
				{
					timeout = 0;
					// Wait up to 500ms for the next byte
					while(!received_data_available() && timeout < 250) {
     8ba:	0b dd       	rcall	.-1514   	; 0x2d2 <received_data_available>
     8bc:	81 11       	cpse	r24, r1
     8be:	0b c0       	rjmp	.+22     	; 0x8d6 <main+0x16e>
     8c0:	1a 3f       	cpi	r17, 0xFA	; 250
     8c2:	09 f4       	brne	.+2      	; 0x8c6 <main+0x15e>
     8c4:	74 c1       	rjmp	.+744    	; 0xbae <__stack+0xaf>
     8c6:	8f e3       	ldi	r24, 0x3F	; 63
     8c8:	9f e1       	ldi	r25, 0x1F	; 31
     8ca:	01 97       	sbiw	r24, 0x01	; 1
     8cc:	f1 f7       	brne	.-4      	; 0x8ca <main+0x162>
     8ce:	00 c0       	rjmp	.+0      	; 0x8d0 <main+0x168>
     8d0:	00 00       	nop
						_delay_ms(2);
						timeout++;
     8d2:	1f 5f       	subi	r17, 0xFF	; 255
     8d4:	f2 cf       	rjmp	.-28     	; 0x8ba <main+0x152>
					}
					if(timeout >= 250)
     8d6:	1a 3f       	cpi	r17, 0xFA	; 250
     8d8:	09 f4       	brne	.+2      	; 0x8dc <main+0x174>
     8da:	69 c1       	rjmp	.+722    	; 0xbae <__stack+0xaf>
						break;
					serial_data[t] = receive_char();
     8dc:	12 dd       	rcall	.-1500   	; 0x302 <receive_char>
     8de:	f4 01       	movw	r30, r8
     8e0:	81 93       	st	Z+, r24
     8e2:	4f 01       	movw	r8, r30
			
			switch(serial_data[0]) {
				// If A, set ALL outputs using 18 bytes of serial data
				case 'A':
				activity_state=1;
				for(int t = 1; t < 19; t++)
     8e4:	89 8d       	ldd	r24, Y+25	; 0x19
     8e6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     8e8:	e8 17       	cp	r30, r24
     8ea:	f9 07       	cpc	r31, r25
     8ec:	29 f7       	brne	.-54     	; 0x8b8 <main+0x150>
					if(timeout >= 250)
						break;
					serial_data[t] = receive_char();
				}
				if(timeout < 250) {
					set_orb('0', serial_data[1], serial_data[2], serial_data[3]);
     8ee:	2c 81       	ldd	r18, Y+4	; 0x04
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	4b 81       	ldd	r20, Y+3	; 0x03
     8f4:	50 e0       	ldi	r21, 0x00	; 0
     8f6:	6a 81       	ldd	r22, Y+2	; 0x02
     8f8:	70 e0       	ldi	r23, 0x00	; 0
     8fa:	80 e3       	ldi	r24, 0x30	; 48
     8fc:	de de       	rcall	.-580    	; 0x6ba <set_orb>
					set_orb('1', serial_data[4], serial_data[5], serial_data[6]);
     8fe:	2f 81       	ldd	r18, Y+7	; 0x07
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	4e 81       	ldd	r20, Y+6	; 0x06
     904:	50 e0       	ldi	r21, 0x00	; 0
     906:	6d 81       	ldd	r22, Y+5	; 0x05
     908:	70 e0       	ldi	r23, 0x00	; 0
     90a:	81 e3       	ldi	r24, 0x31	; 49
     90c:	d6 de       	rcall	.-596    	; 0x6ba <set_orb>
					set_led('0', serial_data[7]);
     90e:	68 85       	ldd	r22, Y+8	; 0x08
     910:	70 e0       	ldi	r23, 0x00	; 0
     912:	80 e3       	ldi	r24, 0x30	; 48
     914:	e2 de       	rcall	.-572    	; 0x6da <set_led>
					set_led('1', serial_data[8]);
     916:	69 85       	ldd	r22, Y+9	; 0x09
     918:	70 e0       	ldi	r23, 0x00	; 0
     91a:	81 e3       	ldi	r24, 0x31	; 49
     91c:	de de       	rcall	.-580    	; 0x6da <set_led>
					set_led('2', serial_data[9]);
     91e:	6a 85       	ldd	r22, Y+10	; 0x0a
     920:	70 e0       	ldi	r23, 0x00	; 0
     922:	82 e3       	ldi	r24, 0x32	; 50
     924:	da de       	rcall	.-588    	; 0x6da <set_led>
					set_led('3', serial_data[10]);
     926:	6b 85       	ldd	r22, Y+11	; 0x0b
     928:	70 e0       	ldi	r23, 0x00	; 0
     92a:	83 e3       	ldi	r24, 0x33	; 51
     92c:	d6 de       	rcall	.-596    	; 0x6da <set_led>
					set_servo(0, serial_data[11]);
     92e:	6c 85       	ldd	r22, Y+12	; 0x0c
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	a2 dc       	rcall	.-1724   	; 0x278 <set_servo>
					set_servo(1, serial_data[12]);
     934:	6d 85       	ldd	r22, Y+13	; 0x0d
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	9f dc       	rcall	.-1730   	; 0x278 <set_servo>
					set_servo(2, serial_data[13]);
     93a:	6e 85       	ldd	r22, Y+14	; 0x0e
     93c:	82 e0       	ldi	r24, 0x02	; 2
     93e:	9c dc       	rcall	.-1736   	; 0x278 <set_servo>
					set_servo(3, serial_data[14]);
     940:	6f 85       	ldd	r22, Y+15	; 0x0f
     942:	83 e0       	ldi	r24, 0x03	; 3
     944:	99 dc       	rcall	.-1742   	; 0x278 <set_servo>
					set_vibration_motor('0', serial_data[15]);
     946:	68 89       	ldd	r22, Y+16	; 0x10
     948:	80 e3       	ldi	r24, 0x30	; 48
     94a:	1b dd       	rcall	.-1482   	; 0x382 <set_vibration_motor>
					set_vibration_motor('1', serial_data[16]);
     94c:	69 89       	ldd	r22, Y+17	; 0x11
     94e:	81 e3       	ldi	r24, 0x31	; 49
     950:	18 dd       	rcall	.-1488   	; 0x382 <set_vibration_motor>
					if(serial_data[17] < 128)
     952:	4a 89       	ldd	r20, Y+18	; 0x12
     954:	47 fd       	sbrc	r20, 7
     956:	03 c0       	rjmp	.+6      	; 0x95e <main+0x1f6>
						set_motor(0, 0, serial_data[17]*2);
     958:	44 0f       	add	r20, r20
     95a:	60 e0       	ldi	r22, 0x00	; 0
     95c:	02 c0       	rjmp	.+4      	; 0x962 <main+0x1fa>
					else
						set_motor(0, 1, (serial_data[17]-128)*2);
     95e:	44 0f       	add	r20, r20
     960:	61 e0       	ldi	r22, 0x01	; 1
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	57 dc       	rcall	.-1874   	; 0x214 <set_motor>
					if(serial_data[18] < 128)
     966:	4b 89       	ldd	r20, Y+19	; 0x13
     968:	47 fd       	sbrc	r20, 7
     96a:	03 c0       	rjmp	.+6      	; 0x972 <main+0x20a>
						set_motor(1, 0, serial_data[18]*2);
     96c:	44 0f       	add	r20, r20
     96e:	60 e0       	ldi	r22, 0x00	; 0
     970:	02 c0       	rjmp	.+4      	; 0x976 <main+0x20e>
					else
						set_motor(1, 1, (serial_data[18]-128)*2);
     972:	44 0f       	add	r20, r20
     974:	61 e0       	ldi	r22, 0x01	; 1
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	78 c0       	rjmp	.+240    	; 0xa6a <main+0x302>
     97a:	10 e0       	ldi	r17, 0x00	; 0
				activity_state=1;
				for(int t = 1; t < 5; t++)
				{
					timeout = 0;
					// Wait up to 500ms for the next byte
					while(!received_data_available() && timeout < 250) {
     97c:	aa dc       	rcall	.-1708   	; 0x2d2 <received_data_available>
     97e:	81 11       	cpse	r24, r1
     980:	0b c0       	rjmp	.+22     	; 0x998 <main+0x230>
     982:	1a 3f       	cpi	r17, 0xFA	; 250
     984:	09 f4       	brne	.+2      	; 0x988 <main+0x220>
     986:	13 c1       	rjmp	.+550    	; 0xbae <__stack+0xaf>
     988:	8f e3       	ldi	r24, 0x3F	; 63
     98a:	9f e1       	ldi	r25, 0x1F	; 31
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	f1 f7       	brne	.-4      	; 0x98c <main+0x224>
     990:	00 c0       	rjmp	.+0      	; 0x992 <main+0x22a>
     992:	00 00       	nop
						_delay_ms(2);
						timeout++;
     994:	1f 5f       	subi	r17, 0xFF	; 255
     996:	f2 cf       	rjmp	.-28     	; 0x97c <main+0x214>
					}
					if(timeout >= 250)
     998:	1a 3f       	cpi	r17, 0xFA	; 250
     99a:	09 f4       	brne	.+2      	; 0x99e <main+0x236>
     99c:	08 c1       	rjmp	.+528    	; 0xbae <__stack+0xaf>
						break;
					serial_data[t] = receive_char();
     99e:	b1 dc       	rcall	.-1694   	; 0x302 <receive_char>
     9a0:	f4 01       	movw	r30, r8
     9a2:	81 93       	st	Z+, r24
     9a4:	4f 01       	movw	r8, r30
				}
				break;
				// If O, set an RGB LED using 4 bytes of serial data
				case 'O':
				activity_state=1;
				for(int t = 1; t < 5; t++)
     9a6:	e2 15       	cp	r30, r2
     9a8:	f3 05       	cpc	r31, r3
     9aa:	39 f7       	brne	.-50     	; 0x97a <main+0x212>
					if(timeout >= 250)
						break;
					serial_data[t] = receive_char();
				}
				if(timeout < 250) {
					set_orb(serial_data[1], serial_data[2], serial_data[3], serial_data[4]);
     9ac:	2d 81       	ldd	r18, Y+5	; 0x05
     9ae:	30 e0       	ldi	r19, 0x00	; 0
     9b0:	4c 81       	ldd	r20, Y+4	; 0x04
     9b2:	50 e0       	ldi	r21, 0x00	; 0
     9b4:	6b 81       	ldd	r22, Y+3	; 0x03
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	8a 81       	ldd	r24, Y+2	; 0x02
     9ba:	7f de       	rcall	.-770    	; 0x6ba <set_orb>
		}

		// Check if we've received data over serial, this is experimental
		if(received_data_available()!=0)
		{
			max_count = 5000000; // Set the time out to 5,000,000, so now we time out in 50 seconds instead of 5
     9bc:	f0 e4       	ldi	r31, 0x40	; 64
     9be:	4f 2e       	mov	r4, r31
     9c0:	fb e4       	ldi	r31, 0x4B	; 75
     9c2:	5f 2e       	mov	r5, r31
     9c4:	fc e4       	ldi	r31, 0x4C	; 76
     9c6:	6f 2e       	mov	r6, r31
     9c8:	71 2c       	mov	r7, r1
					send_char(count);
					count++;
					if(count > 255) {
						count = 0;
					}
					exit_count = 0;
     9ca:	c1 2c       	mov	r12, r1
     9cc:	d1 2c       	mov	r13, r1
     9ce:	76 01       	movw	r14, r12
     9d0:	fc ce       	rjmp	.-520    	; 0x7ca <main+0x62>
					exit_count = 0;  // Reset time-out counter
				}
				break;
				// If 'L', set an LED's intensity with 2 bytes of serial data
				case 'L':
				activity_state=1;
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <activity_state>
     9d8:	ce 01       	movw	r24, r28
     9da:	02 96       	adiw	r24, 0x02	; 2
     9dc:	4c 01       	movw	r8, r24
     9de:	10 e0       	ldi	r17, 0x00	; 0
				for(int t = 1; t < 3; t++)
				{
					timeout = 0;
					while(!received_data_available() && timeout < 250) {
     9e0:	78 dc       	rcall	.-1808   	; 0x2d2 <received_data_available>
     9e2:	81 11       	cpse	r24, r1
     9e4:	0b c0       	rjmp	.+22     	; 0x9fc <main+0x294>
     9e6:	1a 3f       	cpi	r17, 0xFA	; 250
     9e8:	09 f4       	brne	.+2      	; 0x9ec <main+0x284>
     9ea:	e1 c0       	rjmp	.+450    	; 0xbae <__stack+0xaf>
     9ec:	ef e3       	ldi	r30, 0x3F	; 63
     9ee:	ff e1       	ldi	r31, 0x1F	; 31
     9f0:	31 97       	sbiw	r30, 0x01	; 1
     9f2:	f1 f7       	brne	.-4      	; 0x9f0 <main+0x288>
     9f4:	00 c0       	rjmp	.+0      	; 0x9f6 <main+0x28e>
     9f6:	00 00       	nop
						_delay_ms(2);
						timeout++;
     9f8:	1f 5f       	subi	r17, 0xFF	; 255
     9fa:	f2 cf       	rjmp	.-28     	; 0x9e0 <main+0x278>
					}
					if(timeout >= 250)
     9fc:	1a 3f       	cpi	r17, 0xFA	; 250
     9fe:	09 f4       	brne	.+2      	; 0xa02 <main+0x29a>
     a00:	d6 c0       	rjmp	.+428    	; 0xbae <__stack+0xaf>
					break;
					serial_data[t] = receive_char();
     a02:	7f dc       	rcall	.-1794   	; 0x302 <receive_char>
     a04:	f4 01       	movw	r30, r8
     a06:	81 93       	st	Z+, r24
     a08:	4f 01       	movw	r8, r30
				}
				break;
				// If 'L', set an LED's intensity with 2 bytes of serial data
				case 'L':
				activity_state=1;
				for(int t = 1; t < 3; t++)
     a0a:	8d 89       	ldd	r24, Y+21	; 0x15
     a0c:	9e 89       	ldd	r25, Y+22	; 0x16
     a0e:	e8 17       	cp	r30, r24
     a10:	f9 07       	cpc	r31, r25
     a12:	29 f7       	brne	.-54     	; 0x9de <main+0x276>
					if(timeout >= 250)
					break;
					serial_data[t] = receive_char();
				}
				if(timeout < 250) {
					set_led(serial_data[1], serial_data[2]);
     a14:	6b 81       	ldd	r22, Y+3	; 0x03
     a16:	70 e0       	ldi	r23, 0x00	; 0
     a18:	8a 81       	ldd	r24, Y+2	; 0x02
     a1a:	5f de       	rcall	.-834    	; 0x6da <set_led>
     a1c:	cf cf       	rjmp	.-98     	; 0x9bc <main+0x254>
					exit_count = 0;  // Reset time-out counter
				}
				break;
				// If 'M', use bytes 1-3 to set motor speed and direction
				case 'M':
				activity_state=1;
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <activity_state>
     a24:	fe 01       	movw	r30, r28
     a26:	32 96       	adiw	r30, 0x02	; 2
     a28:	4f 01       	movw	r8, r30
     a2a:	10 e0       	ldi	r17, 0x00	; 0
				for(int t = 1; t < 4; t++)
				{
					timeout = 0;
					while(!received_data_available() && timeout < 250) {
     a2c:	52 dc       	rcall	.-1884   	; 0x2d2 <received_data_available>
     a2e:	81 11       	cpse	r24, r1
     a30:	0b c0       	rjmp	.+22     	; 0xa48 <main+0x2e0>
     a32:	1a 3f       	cpi	r17, 0xFA	; 250
     a34:	09 f4       	brne	.+2      	; 0xa38 <main+0x2d0>
     a36:	bb c0       	rjmp	.+374    	; 0xbae <__stack+0xaf>
     a38:	8f e3       	ldi	r24, 0x3F	; 63
     a3a:	9f e1       	ldi	r25, 0x1F	; 31
     a3c:	01 97       	sbiw	r24, 0x01	; 1
     a3e:	f1 f7       	brne	.-4      	; 0xa3c <main+0x2d4>
     a40:	00 c0       	rjmp	.+0      	; 0xa42 <main+0x2da>
     a42:	00 00       	nop
						_delay_ms(2);
						timeout++;
     a44:	1f 5f       	subi	r17, 0xFF	; 255
     a46:	f2 cf       	rjmp	.-28     	; 0xa2c <main+0x2c4>
					}
					if(timeout >= 250)
     a48:	1a 3f       	cpi	r17, 0xFA	; 250
     a4a:	09 f4       	brne	.+2      	; 0xa4e <main+0x2e6>
     a4c:	b0 c0       	rjmp	.+352    	; 0xbae <__stack+0xaf>
					break;
					serial_data[t] = receive_char();
     a4e:	59 dc       	rcall	.-1870   	; 0x302 <receive_char>
     a50:	f4 01       	movw	r30, r8
     a52:	81 93       	st	Z+, r24
     a54:	4f 01       	movw	r8, r30
				}
				break;
				// If 'M', use bytes 1-3 to set motor speed and direction
				case 'M':
				activity_state=1;
				for(int t = 1; t < 4; t++)
     a56:	8f 89       	ldd	r24, Y+23	; 0x17
     a58:	98 8d       	ldd	r25, Y+24	; 0x18
     a5a:	e8 17       	cp	r30, r24
     a5c:	f9 07       	cpc	r31, r25
     a5e:	29 f7       	brne	.-54     	; 0xa2a <main+0x2c2>
					if(timeout >= 250)
					break;
					serial_data[t] = receive_char();
				}
				if(timeout < 250) {
					set_motor(serial_data[1]-48, serial_data[2]-48, serial_data[3]);
     a60:	6b 81       	ldd	r22, Y+3	; 0x03
     a62:	60 53       	subi	r22, 0x30	; 48
     a64:	8a 81       	ldd	r24, Y+2	; 0x02
     a66:	4c 81       	ldd	r20, Y+4	; 0x04
     a68:	80 53       	subi	r24, 0x30	; 48
     a6a:	d4 db       	rcall	.-2136   	; 0x214 <set_motor>
     a6c:	a7 cf       	rjmp	.-178    	; 0x9bc <main+0x254>
     a6e:	10 e0       	ldi	r17, 0x00	; 0
				case 'V':
				activity_state=1;
				for(int t = 1; t < 3; t++)
				{
					timeout = 0;
					while(!received_data_available() && timeout < 250) {
     a70:	30 dc       	rcall	.-1952   	; 0x2d2 <received_data_available>
     a72:	81 11       	cpse	r24, r1
     a74:	0b c0       	rjmp	.+22     	; 0xa8c <main+0x324>
     a76:	1a 3f       	cpi	r17, 0xFA	; 250
     a78:	09 f4       	brne	.+2      	; 0xa7c <main+0x314>
     a7a:	99 c0       	rjmp	.+306    	; 0xbae <__stack+0xaf>
     a7c:	8f e3       	ldi	r24, 0x3F	; 63
     a7e:	9f e1       	ldi	r25, 0x1F	; 31
     a80:	01 97       	sbiw	r24, 0x01	; 1
     a82:	f1 f7       	brne	.-4      	; 0xa80 <main+0x318>
     a84:	00 c0       	rjmp	.+0      	; 0xa86 <main+0x31e>
     a86:	00 00       	nop
						_delay_ms(2);
						timeout++;
     a88:	1f 5f       	subi	r17, 0xFF	; 255
     a8a:	f2 cf       	rjmp	.-28     	; 0xa70 <main+0x308>
					}
					if(timeout >= 250)
     a8c:	1a 3f       	cpi	r17, 0xFA	; 250
     a8e:	09 f4       	brne	.+2      	; 0xa92 <main+0x32a>
     a90:	8e c0       	rjmp	.+284    	; 0xbae <__stack+0xaf>
					break;
					serial_data[t] = receive_char();
     a92:	37 dc       	rcall	.-1938   	; 0x302 <receive_char>
     a94:	f4 01       	movw	r30, r8
     a96:	81 93       	st	Z+, r24
     a98:	4f 01       	movw	r8, r30
				}
				break;
				// If 'V', use bytes 1-2 to set vibration motor intensity
				case 'V':
				activity_state=1;
				for(int t = 1; t < 3; t++)
     a9a:	8d 89       	ldd	r24, Y+21	; 0x15
     a9c:	9e 89       	ldd	r25, Y+22	; 0x16
     a9e:	e8 17       	cp	r30, r24
     aa0:	f9 07       	cpc	r31, r25
     aa2:	29 f7       	brne	.-54     	; 0xa6e <main+0x306>
					if(timeout >= 250)
					break;
					serial_data[t] = receive_char();
				}
				if(timeout < 250) {
					set_vibration_motor(serial_data[1], serial_data[2]);
     aa4:	6b 81       	ldd	r22, Y+3	; 0x03
     aa6:	8a 81       	ldd	r24, Y+2	; 0x02
     aa8:	6c dc       	rcall	.-1832   	; 0x382 <set_vibration_motor>
     aaa:	88 cf       	rjmp	.-240    	; 0x9bc <main+0x254>
					exit_count = 0;
				}
				break;
				// If 'S', use bytes 1-2 to set servo position
				case 'S':
				activity_state=1;
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <activity_state>
     ab2:	fe 01       	movw	r30, r28
     ab4:	32 96       	adiw	r30, 0x02	; 2
     ab6:	4f 01       	movw	r8, r30
     ab8:	10 e0       	ldi	r17, 0x00	; 0
				for(int t = 1; t < 3; t++)
				{
					timeout = 0;
					while(!received_data_available() && timeout < 250) {
     aba:	0b dc       	rcall	.-2026   	; 0x2d2 <received_data_available>
     abc:	81 11       	cpse	r24, r1
     abe:	0b c0       	rjmp	.+22     	; 0xad6 <main+0x36e>
     ac0:	1a 3f       	cpi	r17, 0xFA	; 250
     ac2:	09 f4       	brne	.+2      	; 0xac6 <main+0x35e>
     ac4:	74 c0       	rjmp	.+232    	; 0xbae <__stack+0xaf>
     ac6:	8f e3       	ldi	r24, 0x3F	; 63
     ac8:	9f e1       	ldi	r25, 0x1F	; 31
     aca:	01 97       	sbiw	r24, 0x01	; 1
     acc:	f1 f7       	brne	.-4      	; 0xaca <main+0x362>
     ace:	00 c0       	rjmp	.+0      	; 0xad0 <main+0x368>
     ad0:	00 00       	nop
						_delay_ms(2);
						timeout++;
     ad2:	1f 5f       	subi	r17, 0xFF	; 255
     ad4:	f2 cf       	rjmp	.-28     	; 0xaba <main+0x352>
					}
					if(timeout >= 250)
     ad6:	1a 3f       	cpi	r17, 0xFA	; 250
     ad8:	09 f4       	brne	.+2      	; 0xadc <main+0x374>
     ada:	69 c0       	rjmp	.+210    	; 0xbae <__stack+0xaf>
					break;
					serial_data[t] = receive_char();
     adc:	12 dc       	rcall	.-2012   	; 0x302 <receive_char>
     ade:	f4 01       	movw	r30, r8
     ae0:	81 93       	st	Z+, r24
     ae2:	4f 01       	movw	r8, r30
				}
				break;
				// If 'S', use bytes 1-2 to set servo position
				case 'S':
				activity_state=1;
				for(int t = 1; t < 3; t++)
     ae4:	8d 89       	ldd	r24, Y+21	; 0x15
     ae6:	9e 89       	ldd	r25, Y+22	; 0x16
     ae8:	e8 17       	cp	r30, r24
     aea:	f9 07       	cpc	r31, r25
     aec:	29 f7       	brne	.-54     	; 0xab8 <main+0x350>
					if(timeout >= 250)
					break;
					serial_data[t] = receive_char();
				}
				if(timeout < 250) {
					set_servo(serial_data[1]-48, serial_data[2]);
     aee:	8a 81       	ldd	r24, Y+2	; 0x02
     af0:	6b 81       	ldd	r22, Y+3	; 0x03
     af2:	80 53       	subi	r24, 0x30	; 48
     af4:	c1 db       	rcall	.-2174   	; 0x278 <set_servo>
     af6:	62 cf       	rjmp	.-316    	; 0x9bc <main+0x254>
				break;
				// If 's', return sensor values of the selected sensor port
				case 's':
				activity_state=1;
				timeout = 0; //added here 
				while(!received_data_available() && timeout < 250) {
     af8:	1a 3f       	cpi	r17, 0xFA	; 250
     afa:	09 f4       	brne	.+2      	; 0xafe <main+0x396>
     afc:	58 c0       	rjmp	.+176    	; 0xbae <__stack+0xaf>
     afe:	ef e3       	ldi	r30, 0x3F	; 63
     b00:	ff e1       	ldi	r31, 0x1F	; 31
     b02:	31 97       	sbiw	r30, 0x01	; 1
     b04:	f1 f7       	brne	.-4      	; 0xb02 <__stack+0x3>
     b06:	00 c0       	rjmp	.+0      	; 0xb08 <__stack+0x9>
     b08:	00 00       	nop
					_delay_ms(2);
					timeout++;
     b0a:	1f 5f       	subi	r17, 0xFF	; 255
				break;
				// If 's', return sensor values of the selected sensor port
				case 's':
				activity_state=1;
				timeout = 0; //added here 
				while(!received_data_available() && timeout < 250) {
     b0c:	e2 db       	rcall	.-2108   	; 0x2d2 <received_data_available>
     b0e:	88 23       	and	r24, r24
     b10:	99 f3       	breq	.-26     	; 0xaf8 <main+0x390>
					_delay_ms(2);
					timeout++;
				}
				if(timeout < 250)
     b12:	1a 3f       	cpi	r17, 0xFA	; 250
     b14:	09 f4       	brne	.+2      	; 0xb18 <__stack+0x19>
     b16:	4b c0       	rjmp	.+150    	; 0xbae <__stack+0xaf>
				{
					serial_data[1] = receive_char();
     b18:	f4 db       	rcall	.-2072   	; 0x302 <receive_char>
     b1a:	8a 83       	std	Y+2, r24	; 0x02
     b1c:	1b c0       	rjmp	.+54     	; 0xb54 <__stack+0x55>
					exit_count = 0;
				}
				break;
				// If 't', return sensor values of the selected sensor port with a delay (for micro:bit testing & optimization)
				case 't':
				activity_state=1;
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <activity_state>
				while(!received_data_available() && timeout < 250) {
     b24:	d6 db       	rcall	.-2132   	; 0x2d2 <received_data_available>
     b26:	81 11       	cpse	r24, r1
     b28:	0b c0       	rjmp	.+22     	; 0xb40 <__stack+0x41>
     b2a:	1a 3f       	cpi	r17, 0xFA	; 250
     b2c:	08 f0       	brcs	.+2      	; 0xb30 <__stack+0x31>
     b2e:	3f c0       	rjmp	.+126    	; 0xbae <__stack+0xaf>
     b30:	8f e3       	ldi	r24, 0x3F	; 63
     b32:	9f e1       	ldi	r25, 0x1F	; 31
     b34:	01 97       	sbiw	r24, 0x01	; 1
     b36:	f1 f7       	brne	.-4      	; 0xb34 <__stack+0x35>
     b38:	00 c0       	rjmp	.+0      	; 0xb3a <__stack+0x3b>
     b3a:	00 00       	nop
					_delay_ms(2);
					timeout++;
     b3c:	1f 5f       	subi	r17, 0xFF	; 255
     b3e:	f2 cf       	rjmp	.-28     	; 0xb24 <__stack+0x25>
				}
				if(timeout < 250)
     b40:	1a 3f       	cpi	r17, 0xFA	; 250
     b42:	a8 f5       	brcc	.+106    	; 0xbae <__stack+0xaf>
				{
					serial_data[1] = receive_char();
     b44:	de db       	rcall	.-2116   	; 0x302 <receive_char>
     b46:	8a 83       	std	Y+2, r24	; 0x02
     b48:	ef eb       	ldi	r30, 0xBF	; 191
     b4a:	fd e5       	ldi	r31, 0x5D	; 93
     b4c:	31 97       	sbiw	r30, 0x01	; 1
     b4e:	f1 f7       	brne	.-4      	; 0xb4c <__stack+0x4d>
     b50:	00 c0       	rjmp	.+0      	; 0xb52 <__stack+0x53>
     b52:	00 00       	nop
					_delay_ms(6);
					if(serial_data[1]=='0')
     b54:	80 33       	cpi	r24, 0x30	; 48
     b56:	11 f4       	brne	.+4      	; 0xb5c <__stack+0x5d>
					{
						send_char(read_sensor(SENSOR1));
     b58:	86 e6       	ldi	r24, 0x66	; 102
     b5a:	84 c0       	rjmp	.+264    	; 0xc64 <__stack+0x165>
					}
					else if(serial_data[1]=='1')
     b5c:	81 33       	cpi	r24, 0x31	; 49
     b5e:	11 f4       	brne	.+4      	; 0xb64 <__stack+0x65>
					{
						send_char(read_sensor(SENSOR2));
     b60:	85 e6       	ldi	r24, 0x65	; 101
     b62:	80 c0       	rjmp	.+256    	; 0xc64 <__stack+0x165>
					}
					else if(serial_data[1]=='2')
     b64:	82 33       	cpi	r24, 0x32	; 50
     b66:	11 f4       	brne	.+4      	; 0xb6c <__stack+0x6d>
					{
						send_char(read_sensor(SENSOR3));
     b68:	84 e6       	ldi	r24, 0x64	; 100
     b6a:	7c c0       	rjmp	.+248    	; 0xc64 <__stack+0x165>
					}
					else if(serial_data[1]=='3')
     b6c:	83 33       	cpi	r24, 0x33	; 51
     b6e:	11 f4       	brne	.+4      	; 0xb74 <__stack+0x75>
					{
						send_char(read_sensor(SENSOR4));
     b70:	81 e6       	ldi	r24, 0x61	; 97
     b72:	78 c0       	rjmp	.+240    	; 0xc64 <__stack+0x165>
					}
					else if(serial_data[1]=='4')
     b74:	84 33       	cpi	r24, 0x34	; 52
     b76:	09 f0       	breq	.+2      	; 0xb7a <__stack+0x7b>
     b78:	21 cf       	rjmp	.-446    	; 0x9bc <main+0x254>
     b7a:	73 c0       	rjmp	.+230    	; 0xc62 <__stack+0x163>
					exit_count = 0;
				}
				break;
				// Fast way to turn everything off
				case 'X':
				activity_state=1;
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <activity_state>
     b82:	02 c0       	rjmp	.+4      	; 0xb88 <__stack+0x89>
				sensor_broadcast_count = 0;
				exit_count = 0;
				break;
				// Fast way to turn everything off AND go to idle state
				case 'R':
				activity_state=0; // idle mode flag
     b84:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <activity_state>
				turn_off_motors();
     b88:	43 db       	rcall	.-2426   	; 0x210 <turn_off_motors>
				turn_off_leds();
     b8a:	be dd       	rcall	.-1156   	; 0x708 <turn_off_leds>
				disable_servos();
     b8c:	73 db       	rcall	.-2330   	; 0x274 <disable_servos>
				disable_vibration_motors();
     b8e:	0b dc       	rcall	.-2026   	; 0x3a6 <disable_vibration_motors>
     b90:	7f c0       	rjmp	.+254    	; 0xc90 <__stack+0x191>
				sensor_broadcast_count = 0;
				exit_count = 0;
				break;
				case 'G':
				activity_state=1;
				while(!received_data_available() && timeout < 250) {
     b92:	1a 3f       	cpi	r17, 0xFA	; 250
     b94:	60 f4       	brcc	.+24     	; 0xbae <__stack+0xaf>
     b96:	8f e3       	ldi	r24, 0x3F	; 63
     b98:	9f e1       	ldi	r25, 0x1F	; 31
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	f1 f7       	brne	.-4      	; 0xb9a <__stack+0x9b>
     b9e:	00 c0       	rjmp	.+0      	; 0xba0 <__stack+0xa1>
     ba0:	00 00       	nop
					_delay_ms(2);
					timeout++;
     ba2:	1f 5f       	subi	r17, 0xFF	; 255
				sensor_broadcast_count = 0;
				exit_count = 0;
				break;
				case 'G':
				activity_state=1;
				while(!received_data_available() && timeout < 250) {
     ba4:	96 db       	rcall	.-2260   	; 0x2d2 <received_data_available>
     ba6:	88 23       	and	r24, r24
     ba8:	a1 f3       	breq	.-24     	; 0xb92 <__stack+0x93>
					_delay_ms(2);
					timeout++;
				}
				// If you didn't timeout, provide the requested data
				if(timeout < 250)
     baa:	1a 3f       	cpi	r17, 0xFA	; 250
     bac:	40 f0       	brcs	.+16     	; 0xbbe <__stack+0xbf>
		}

		// Check if we've received data over serial, this is experimental
		if(received_data_available()!=0)
		{
			max_count = 5000000; // Set the time out to 5,000,000, so now we time out in 50 seconds instead of 5
     bae:	e0 e4       	ldi	r30, 0x40	; 64
     bb0:	4e 2e       	mov	r4, r30
     bb2:	eb e4       	ldi	r30, 0x4B	; 75
     bb4:	5e 2e       	mov	r5, r30
     bb6:	ec e4       	ldi	r30, 0x4C	; 76
     bb8:	6e 2e       	mov	r6, r30
     bba:	71 2c       	mov	r7, r1
     bbc:	06 ce       	rjmp	.-1012   	; 0x7ca <main+0x62>
					timeout++;
				}
				// If you didn't timeout, provide the requested data
				if(timeout < 250)
				{
					serial_data[1] = receive_char();
     bbe:	a1 db       	rcall	.-2238   	; 0x302 <receive_char>
     bc0:	8a 83       	std	Y+2, r24	; 0x02
					if(serial_data[1] == '0') {
     bc2:	80 33       	cpi	r24, 0x30	; 48
     bc4:	71 f4       	brne	.+28     	; 0xbe2 <__stack+0xe3>
     bc6:	76 e1       	ldi	r23, 0x16	; 22
     bc8:	e7 2e       	mov	r14, r23
     bca:	71 e0       	ldi	r23, 0x01	; 1
     bcc:	f7 2e       	mov	r15, r23
					//	send_char(0x06); // Send 6 bytes
						for(int i = 0; i < 6; i++) {
							send_char(led_values_temp[i]);
     bce:	f7 01       	movw	r30, r14
     bd0:	81 91       	ld	r24, Z+
     bd2:	7f 01       	movw	r14, r30
     bd4:	77 db       	rcall	.-2322   	; 0x2c4 <send_char>
				if(timeout < 250)
				{
					serial_data[1] = receive_char();
					if(serial_data[1] == '0') {
					//	send_char(0x06); // Send 6 bytes
						for(int i = 0; i < 6; i++) {
     bd6:	fc e1       	ldi	r31, 0x1C	; 28
     bd8:	ef 16       	cp	r14, r31
     bda:	f1 e0       	ldi	r31, 0x01	; 1
     bdc:	ff 06       	cpc	r15, r31
     bde:	b9 f7       	brne	.-18     	; 0xbce <__stack+0xcf>
     be0:	ed ce       	rjmp	.-550    	; 0x9bc <main+0x254>
							send_char(led_values_temp[i]);
						}
					}
					else if(serial_data[1] == '1') {
     be2:	81 33       	cpi	r24, 0x31	; 49
     be4:	d9 f4       	brne	.+54     	; 0xc1c <__stack+0x11d>
     be6:	6c e1       	ldi	r22, 0x1C	; 28
     be8:	e6 2e       	mov	r14, r22
     bea:	61 e0       	ldi	r22, 0x01	; 1
     bec:	f6 2e       	mov	r15, r22
					//	send_char(0x08); // Send 8 bytes
						for(int i = 6; i < 10; i++) {
							send_char(led_values_temp[i]);
     bee:	f7 01       	movw	r30, r14
     bf0:	81 91       	ld	r24, Z+
     bf2:	7f 01       	movw	r14, r30
     bf4:	67 db       	rcall	.-2354   	; 0x2c4 <send_char>
							send_char(led_values_temp[i]);
						}
					}
					else if(serial_data[1] == '1') {
					//	send_char(0x08); // Send 8 bytes
						for(int i = 6; i < 10; i++) {
     bf6:	f0 e2       	ldi	r31, 0x20	; 32
     bf8:	ef 16       	cp	r14, r31
     bfa:	f1 e0       	ldi	r31, 0x01	; 1
     bfc:	ff 06       	cpc	r15, r31
     bfe:	b9 f7       	brne	.-18     	; 0xbee <__stack+0xef>
     c00:	5e e2       	ldi	r21, 0x2E	; 46
     c02:	e5 2e       	mov	r14, r21
     c04:	51 e0       	ldi	r21, 0x01	; 1
     c06:	f5 2e       	mov	r15, r21
							send_char(led_values_temp[i]);
						}
						for(int i = 0; i < 4; i++) {
							send_char(servo_values_temp[i]);
     c08:	f7 01       	movw	r30, r14
     c0a:	81 91       	ld	r24, Z+
     c0c:	7f 01       	movw	r14, r30
     c0e:	5a db       	rcall	.-2380   	; 0x2c4 <send_char>
					else if(serial_data[1] == '1') {
					//	send_char(0x08); // Send 8 bytes
						for(int i = 6; i < 10; i++) {
							send_char(led_values_temp[i]);
						}
						for(int i = 0; i < 4; i++) {
     c10:	f2 e3       	ldi	r31, 0x32	; 50
     c12:	ef 16       	cp	r14, r31
     c14:	f1 e0       	ldi	r31, 0x01	; 1
     c16:	ff 06       	cpc	r15, r31
     c18:	b9 f7       	brne	.-18     	; 0xc08 <__stack+0x109>
     c1a:	d0 ce       	rjmp	.-608    	; 0x9bc <main+0x254>
							send_char(servo_values_temp[i]);
						}
					}
					else if(serial_data[1] == '2') {
     c1c:	82 33       	cpi	r24, 0x32	; 50
     c1e:	99 f4       	brne	.+38     	; 0xc46 <__stack+0x147>
     c20:	44 e3       	ldi	r20, 0x34	; 52
     c22:	e4 2e       	mov	r14, r20
     c24:	41 e0       	ldi	r20, 0x01	; 1
     c26:	f4 2e       	mov	r15, r20
					//	send_char(0x06); // Send 6 bytes
						for(int i = 0; i < 4; i++) {
							send_char(motor_vals[i]);
     c28:	f7 01       	movw	r30, r14
     c2a:	81 91       	ld	r24, Z+
     c2c:	7f 01       	movw	r14, r30
     c2e:	4a db       	rcall	.-2412   	; 0x2c4 <send_char>
							send_char(servo_values_temp[i]);
						}
					}
					else if(serial_data[1] == '2') {
					//	send_char(0x06); // Send 6 bytes
						for(int i = 0; i < 4; i++) {
     c30:	f8 e3       	ldi	r31, 0x38	; 56
     c32:	ef 16       	cp	r14, r31
     c34:	f1 e0       	ldi	r31, 0x01	; 1
     c36:	ff 06       	cpc	r15, r31
     c38:	b9 f7       	brne	.-18     	; 0xc28 <__stack+0x129>
							send_char(motor_vals[i]);
						}
						send_char(vbr_values_temp[0]);
     c3a:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <vbr_values_temp>
     c3e:	42 db       	rcall	.-2428   	; 0x2c4 <send_char>
						send_char(vbr_values_temp[1]);
     c40:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <vbr_values_temp+0x1>
     c44:	52 c0       	rjmp	.+164    	; 0xcea <__stack+0x1eb>
					}
					else if(serial_data[1] == '3') {
     c46:	83 33       	cpi	r24, 0x33	; 51
     c48:	79 f4       	brne	.+30     	; 0xc68 <__stack+0x169>
					//	send_char(0x05); // Send 5 bytes
						send_char(read_sensor(SENSOR1));
     c4a:	86 e6       	ldi	r24, 0x66	; 102
     c4c:	b7 da       	rcall	.-2706   	; 0x1bc <read_sensor>
     c4e:	3a db       	rcall	.-2444   	; 0x2c4 <send_char>
						send_char(read_sensor(SENSOR2));
     c50:	85 e6       	ldi	r24, 0x65	; 101
     c52:	b4 da       	rcall	.-2712   	; 0x1bc <read_sensor>
     c54:	37 db       	rcall	.-2450   	; 0x2c4 <send_char>
						send_char(read_sensor(SENSOR3));
     c56:	84 e6       	ldi	r24, 0x64	; 100
     c58:	b1 da       	rcall	.-2718   	; 0x1bc <read_sensor>
     c5a:	34 db       	rcall	.-2456   	; 0x2c4 <send_char>
						send_char(read_sensor(SENSOR4));
     c5c:	81 e6       	ldi	r24, 0x61	; 97
     c5e:	ae da       	rcall	.-2724   	; 0x1bc <read_sensor>
     c60:	31 db       	rcall	.-2462   	; 0x2c4 <send_char>
						send_char(read_sensor(EXT_PWR));
     c62:	80 e6       	ldi	r24, 0x60	; 96
     c64:	ab da       	rcall	.-2730   	; 0x1bc <read_sensor>
     c66:	41 c0       	rjmp	.+130    	; 0xcea <__stack+0x1eb>

					}
					// Returns hardware/firmware version
					else if(serial_data[1] == '4') {
     c68:	84 33       	cpi	r24, 0x34	; 52
     c6a:	51 f4       	brne	.+20     	; 0xc80 <__stack+0x181>
					//	send_char(0x05); // Send 5 bytes
						// hardware version
						send_char(0x03);
     c6c:	83 e0       	ldi	r24, 0x03	; 3
     c6e:	2a db       	rcall	.-2476   	; 0x2c4 <send_char>
						send_char(0x00);
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	28 db       	rcall	.-2480   	; 0x2c4 <send_char>
						// firmware version
						send_char(MAJOR_FIRMWARE_VERSION);
     c74:	82 e0       	ldi	r24, 0x02	; 2
     c76:	26 db       	rcall	.-2484   	; 0x2c4 <send_char>
						send_char(MINOR_FIRMWARE_VERSION);
     c78:	83 e0       	ldi	r24, 0x03	; 3
     c7a:	24 db       	rcall	.-2488   	; 0x2c4 <send_char>
						send_char(MINOR_FIRMWARE_VERSION2);
     c7c:	81 e6       	ldi	r24, 0x61	; 97
     c7e:	35 c0       	rjmp	.+106    	; 0xcea <__stack+0x1eb>
						}
					// Turns sensor broadcasting on
					else if(serial_data[1] == '5') {
     c80:	85 33       	cpi	r24, 0x35	; 53
     c82:	21 f4       	brne	.+8      	; 0xc8c <__stack+0x18d>
						sensor_broadcast = 1;
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <sensor_broadcast>
     c8a:	98 ce       	rjmp	.-720    	; 0x9bc <main+0x254>
						}
					// Turns sensor broadcasting off
					else if(serial_data[1] == '6') {
     c8c:	86 33       	cpi	r24, 0x36	; 54
     c8e:	29 f4       	brne	.+10     	; 0xc9a <__stack+0x19b>
						sensor_broadcast = 0;
     c90:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <sensor_broadcast>
						sensor_broadcast_count = 0;
     c94:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
     c98:	91 ce       	rjmp	.-734    	; 0x9bc <main+0x254>
						}				
					else if(serial_data[1] == '7') {
     c9a:	87 33       	cpi	r24, 0x37	; 55
     c9c:	09 f0       	breq	.+2      	; 0xca0 <__stack+0x1a1>
     c9e:	8e ce       	rjmp	.-740    	; 0x9bc <main+0x254>
     ca0:	36 e1       	ldi	r19, 0x16	; 22
     ca2:	e3 2e       	mov	r14, r19
     ca4:	31 e0       	ldi	r19, 0x01	; 1
     ca6:	f3 2e       	mov	r15, r19
					//	send_char(0x12); // Send 18 bytes
						for(int i = 0; i < 10; i++) {
							send_char(led_values_temp[i]);
     ca8:	f7 01       	movw	r30, r14
     caa:	81 91       	ld	r24, Z+
     cac:	7f 01       	movw	r14, r30
     cae:	0a db       	rcall	.-2540   	; 0x2c4 <send_char>
						sensor_broadcast = 0;
						sensor_broadcast_count = 0;
						}				
					else if(serial_data[1] == '7') {
					//	send_char(0x12); // Send 18 bytes
						for(int i = 0; i < 10; i++) {
     cb0:	f0 e2       	ldi	r31, 0x20	; 32
     cb2:	ef 16       	cp	r14, r31
     cb4:	f1 e0       	ldi	r31, 0x01	; 1
     cb6:	ff 06       	cpc	r15, r31
     cb8:	b9 f7       	brne	.-18     	; 0xca8 <__stack+0x1a9>
     cba:	2e e2       	ldi	r18, 0x2E	; 46
     cbc:	e2 2e       	mov	r14, r18
     cbe:	21 e0       	ldi	r18, 0x01	; 1
     cc0:	f2 2e       	mov	r15, r18
							send_char(led_values_temp[i]);
						}
						for(int i = 0; i < 4; i++) {
							send_char(servo_values_temp[i]);
     cc2:	f7 01       	movw	r30, r14
     cc4:	81 91       	ld	r24, Z+
     cc6:	7f 01       	movw	r14, r30
     cc8:	fd da       	rcall	.-2566   	; 0x2c4 <send_char>
					else if(serial_data[1] == '7') {
					//	send_char(0x12); // Send 18 bytes
						for(int i = 0; i < 10; i++) {
							send_char(led_values_temp[i]);
						}
						for(int i = 0; i < 4; i++) {
     cca:	f2 e3       	ldi	r31, 0x32	; 50
     ccc:	ef 16       	cp	r14, r31
     cce:	f1 e0       	ldi	r31, 0x01	; 1
     cd0:	ff 06       	cpc	r15, r31
     cd2:	b9 f7       	brne	.-18     	; 0xcc2 <__stack+0x1c3>
							send_char(servo_values_temp[i]);
						}
						send_char(vbr_values_temp[0]);
     cd4:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <vbr_values_temp>
     cd8:	f5 da       	rcall	.-2582   	; 0x2c4 <send_char>
						send_char(vbr_values_temp[1]);
     cda:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <vbr_values_temp+0x1>
     cde:	f2 da       	rcall	.-2588   	; 0x2c4 <send_char>
						
						for(int i = 0; i < 2; i++) {
							send_char(motor_vals_compressed[i]);
     ce0:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <motor_vals_compressed>
     ce4:	ef da       	rcall	.-2594   	; 0x2c4 <send_char>
     ce6:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <motor_vals_compressed+0x1>
     cea:	ec da       	rcall	.-2600   	; 0x2c4 <send_char>
     cec:	67 ce       	rjmp	.-818    	; 0x9bc <main+0x254>
					exit_count = 0;					
				}
				break;
				// Returns an incrementing counter - used to measure cycle time and as a keep-alive.
				case 'z':
					activity_state=1;
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <activity_state>
				//	send_char(0x01); // Send 1 byte
					send_char(count);
     cf4:	8a 2d       	mov	r24, r10
     cf6:	e6 da       	rcall	.-2612   	; 0x2c4 <send_char>
					count++;
     cf8:	2f ef       	ldi	r18, 0xFF	; 255
     cfa:	a2 1a       	sub	r10, r18
     cfc:	b2 0a       	sbc	r11, r18
					if(count > 255) {
     cfe:	8f ef       	ldi	r24, 0xFF	; 255
     d00:	a8 16       	cp	r10, r24
     d02:	b1 04       	cpc	r11, r1
     d04:	09 f0       	breq	.+2      	; 0xd08 <__stack+0x209>
     d06:	0c f4       	brge	.+2      	; 0xd0a <__stack+0x20b>
     d08:	59 ce       	rjmp	.-846    	; 0x9bc <main+0x254>
		}

		// Check if we've received data over serial, this is experimental
		if(received_data_available()!=0)
		{
			max_count = 5000000; // Set the time out to 5,000,000, so now we time out in 50 seconds instead of 5
     d0a:	90 e4       	ldi	r25, 0x40	; 64
     d0c:	49 2e       	mov	r4, r25
     d0e:	9b e4       	ldi	r25, 0x4B	; 75
     d10:	59 2e       	mov	r5, r25
     d12:	9c e4       	ldi	r25, 0x4C	; 76
     d14:	69 2e       	mov	r6, r25
     d16:	71 2c       	mov	r7, r1
					send_char(count);
					count++;
					if(count > 255) {
						count = 0;
					}
					exit_count = 0;
     d18:	c1 2c       	mov	r12, r1
     d1a:	d1 2c       	mov	r13, r1
     d1c:	76 01       	movw	r14, r12
					activity_state=1;
				//	send_char(0x01); // Send 1 byte
					send_char(count);
					count++;
					if(count > 255) {
						count = 0;
     d1e:	a1 2c       	mov	r10, r1
     d20:	b1 2c       	mov	r11, r1
     d22:	53 cd       	rjmp	.-1370   	; 0x7ca <main+0x62>
		}
		else
		{
			usb_data = 1;
		// HID Reports are 8 bytes long. The first byte specifies the function of that report (set motors, get light sensor values, etc).
			switch(HIDReportEcho.ReportData[0]) {
     d24:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <HIDReportEcho+0x3>
     d28:	82 35       	cpi	r24, 0x52	; 82
     d2a:	09 f4       	brne	.+2      	; 0xd2e <__stack+0x22f>
     d2c:	61 c0       	rjmp	.+194    	; 0xdf0 <__stack+0x2f1>
     d2e:	c8 f4       	brcc	.+50     	; 0xd62 <__stack+0x263>
     d30:	8c 34       	cpi	r24, 0x4C	; 76
     d32:	61 f1       	breq	.+88     	; 0xd8c <__stack+0x28d>
     d34:	20 f4       	brcc	.+8      	; 0xd3e <__stack+0x23f>
     d36:	87 34       	cpi	r24, 0x47	; 71
     d38:	09 f4       	brne	.+2      	; 0xd3c <__stack+0x23d>
     d3a:	5f c0       	rjmp	.+190    	; 0xdfa <__stack+0x2fb>
     d3c:	46 cd       	rjmp	.-1396   	; 0x7ca <main+0x62>
     d3e:	8d 34       	cpi	r24, 0x4D	; 77
     d40:	61 f1       	breq	.+88     	; 0xd9a <__stack+0x29b>
     d42:	8f 34       	cpi	r24, 0x4F	; 79
     d44:	09 f0       	breq	.+2      	; 0xd48 <__stack+0x249>
     d46:	41 cd       	rjmp	.-1406   	; 0x7ca <main+0x62>
				// If O, set an RGB LED using bytes 1-4 of the HID report
				case 'O':
					set_orb(HIDReportEcho.ReportData[1], HIDReportEcho.ReportData[2], HIDReportEcho.ReportData[3], HIDReportEcho.ReportData[4]);
     d48:	20 91 47 02 	lds	r18, 0x0247	; 0x800247 <HIDReportEcho+0x7>
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	40 91 46 02 	lds	r20, 0x0246	; 0x800246 <HIDReportEcho+0x6>
     d52:	50 e0       	ldi	r21, 0x00	; 0
     d54:	60 91 45 02 	lds	r22, 0x0245	; 0x800245 <HIDReportEcho+0x5>
     d58:	70 e0       	ldi	r23, 0x00	; 0
     d5a:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <HIDReportEcho+0x4>
     d5e:	ad dc       	rcall	.-1702   	; 0x6ba <set_orb>
					break;
     d60:	c6 c0       	rjmp	.+396    	; 0xeee <__stack+0x3ef>
		}
		else
		{
			usb_data = 1;
		// HID Reports are 8 bytes long. The first byte specifies the function of that report (set motors, get light sensor values, etc).
			switch(HIDReportEcho.ReportData[0]) {
     d62:	88 35       	cpi	r24, 0x58	; 88
     d64:	09 f4       	brne	.+2      	; 0xd68 <__stack+0x269>
     d66:	44 c0       	rjmp	.+136    	; 0xdf0 <__stack+0x2f1>
     d68:	58 f4       	brcc	.+22     	; 0xd80 <__stack+0x281>
     d6a:	83 35       	cpi	r24, 0x53	; 83
     d6c:	01 f1       	breq	.+64     	; 0xdae <__stack+0x2af>
     d6e:	86 35       	cpi	r24, 0x56	; 86
     d70:	09 f0       	breq	.+2      	; 0xd74 <__stack+0x275>
     d72:	2b cd       	rjmp	.-1450   	; 0x7ca <main+0x62>
				case 'M':
					set_motor(HIDReportEcho.ReportData[1]-48, HIDReportEcho.ReportData[2]-48, HIDReportEcho.ReportData[3]);
					break;
				// If 'V', use bytes 1-2 to set vibration motor intensity
				case 'V':
					set_vibration_motor(HIDReportEcho.ReportData[1], HIDReportEcho.ReportData[2]);
     d74:	60 91 45 02 	lds	r22, 0x0245	; 0x800245 <HIDReportEcho+0x5>
     d78:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <HIDReportEcho+0x4>
     d7c:	02 db       	rcall	.-2556   	; 0x382 <set_vibration_motor>
					break;
     d7e:	b7 c0       	rjmp	.+366    	; 0xeee <__stack+0x3ef>
		}
		else
		{
			usb_data = 1;
		// HID Reports are 8 bytes long. The first byte specifies the function of that report (set motors, get light sensor values, etc).
			switch(HIDReportEcho.ReportData[0]) {
     d80:	83 37       	cpi	r24, 0x73	; 115
     d82:	e1 f0       	breq	.+56     	; 0xdbc <__stack+0x2bd>
     d84:	8a 37       	cpi	r24, 0x7A	; 122
     d86:	09 f4       	brne	.+2      	; 0xd8a <__stack+0x28b>
     d88:	a6 c0       	rjmp	.+332    	; 0xed6 <__stack+0x3d7>
     d8a:	1f cd       	rjmp	.-1474   	; 0x7ca <main+0x62>
				case 'O':
					set_orb(HIDReportEcho.ReportData[1], HIDReportEcho.ReportData[2], HIDReportEcho.ReportData[3], HIDReportEcho.ReportData[4]);
					break;
				// If 'L', set an LED's intensity with bytes 1-2 of the HID report
				case 'L':
					set_led(HIDReportEcho.ReportData[1], HIDReportEcho.ReportData[2]);
     d8c:	60 91 45 02 	lds	r22, 0x0245	; 0x800245 <HIDReportEcho+0x5>
     d90:	70 e0       	ldi	r23, 0x00	; 0
     d92:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <HIDReportEcho+0x4>
     d96:	a1 dc       	rcall	.-1726   	; 0x6da <set_led>
					break;
     d98:	aa c0       	rjmp	.+340    	; 0xeee <__stack+0x3ef>
				// If 'M', use bytes 1-3 to set motor speed and direction
				case 'M':
					set_motor(HIDReportEcho.ReportData[1]-48, HIDReportEcho.ReportData[2]-48, HIDReportEcho.ReportData[3]);
     d9a:	60 91 45 02 	lds	r22, 0x0245	; 0x800245 <HIDReportEcho+0x5>
     d9e:	60 53       	subi	r22, 0x30	; 48
     da0:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <HIDReportEcho+0x4>
     da4:	40 91 46 02 	lds	r20, 0x0246	; 0x800246 <HIDReportEcho+0x6>
     da8:	80 53       	subi	r24, 0x30	; 48
     daa:	34 da       	rcall	.-2968   	; 0x214 <set_motor>
					break;
     dac:	a0 c0       	rjmp	.+320    	; 0xeee <__stack+0x3ef>
				case 'V':
					set_vibration_motor(HIDReportEcho.ReportData[1], HIDReportEcho.ReportData[2]);
					break;
				// If 'S', use bytes 1-2 to set servo position
				case 'S':
					set_servo(HIDReportEcho.ReportData[1]-48, HIDReportEcho.ReportData[2]);
     dae:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <HIDReportEcho+0x4>
     db2:	60 91 45 02 	lds	r22, 0x0245	; 0x800245 <HIDReportEcho+0x5>
     db6:	80 53       	subi	r24, 0x30	; 48
     db8:	5f da       	rcall	.-2882   	; 0x278 <set_servo>
					break;
     dba:	99 c0       	rjmp	.+306    	; 0xeee <__stack+0x3ef>
				// If 's', return sensor values of the selected sensor port
				case 's':
					if(HIDReportEcho.ReportData[1]=='0')
     dbc:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <HIDReportEcho+0x4>
     dc0:	80 33       	cpi	r24, 0x30	; 48
     dc2:	11 f4       	brne	.+4      	; 0xdc8 <__stack+0x2c9>
					{
						OutGoingReport.ReportData[0] = read_sensor(SENSOR1);
     dc4:	86 e6       	ldi	r24, 0x66	; 102
     dc6:	07 c0       	rjmp	.+14     	; 0xdd6 <__stack+0x2d7>
					}
					else if(HIDReportEcho.ReportData[1]=='1')
     dc8:	81 33       	cpi	r24, 0x31	; 49
     dca:	11 f4       	brne	.+4      	; 0xdd0 <__stack+0x2d1>
					{
						OutGoingReport.ReportData[0] = read_sensor(SENSOR2);
     dcc:	85 e6       	ldi	r24, 0x65	; 101
     dce:	03 c0       	rjmp	.+6      	; 0xdd6 <__stack+0x2d7>
					}
					else if(HIDReportEcho.ReportData[1]=='2')
     dd0:	82 33       	cpi	r24, 0x32	; 50
     dd2:	29 f4       	brne	.+10     	; 0xdde <__stack+0x2df>
					{
						OutGoingReport.ReportData[0] = read_sensor(SENSOR3);
     dd4:	84 e6       	ldi	r24, 0x64	; 100
     dd6:	f2 d9       	rcall	.-3100   	; 0x1bc <read_sensor>
     dd8:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <OutGoingReport+0x3>
     ddc:	88 c0       	rjmp	.+272    	; 0xeee <__stack+0x3ef>
					}
					else if(HIDReportEcho.ReportData[1]=='3')
     dde:	83 33       	cpi	r24, 0x33	; 51
     de0:	11 f4       	brne	.+4      	; 0xde6 <__stack+0x2e7>
					{
						OutGoingReport.ReportData[0] = read_sensor(SENSOR4);
     de2:	81 e6       	ldi	r24, 0x61	; 97
     de4:	f8 cf       	rjmp	.-16     	; 0xdd6 <__stack+0x2d7>
					}
					else if(HIDReportEcho.ReportData[1]=='4')
     de6:	84 33       	cpi	r24, 0x34	; 52
     de8:	09 f0       	breq	.+2      	; 0xdec <__stack+0x2ed>
     dea:	81 c0       	rjmp	.+258    	; 0xeee <__stack+0x3ef>
					{
						OutGoingReport.ReportData[0] = read_sensor(EXT_PWR);
     dec:	80 e6       	ldi	r24, 0x60	; 96
     dee:	f3 cf       	rjmp	.-26     	; 0xdd6 <__stack+0x2d7>
					disable_servos();
					disable_vibration_motors();
					break;
				// Fast way to turn everything off AND go to idle state
				case 'R':
					turn_off_motors();
     df0:	0f da       	rcall	.-3042   	; 0x210 <turn_off_motors>
					turn_off_leds();
     df2:	8a dc       	rcall	.-1772   	; 0x708 <turn_off_leds>
					disable_servos();
     df4:	3f da       	rcall	.-2946   	; 0x274 <disable_servos>
					disable_vibration_motors();
     df6:	d7 da       	rcall	.-2642   	; 0x3a6 <disable_vibration_motors>
					// Turn off everything
					break;
     df8:	7a c0       	rjmp	.+244    	; 0xeee <__stack+0x3ef>
				case 'G':
					if(HIDReportEcho.ReportData[1] == '0') {
     dfa:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <HIDReportEcho+0x4>
     dfe:	80 33       	cpi	r24, 0x30	; 48
     e00:	59 f4       	brne	.+22     	; 0xe18 <__stack+0x319>
     e02:	e6 e1       	ldi	r30, 0x16	; 22
     e04:	f1 e0       	ldi	r31, 0x01	; 1
     e06:	ae e4       	ldi	r26, 0x4E	; 78
     e08:	b2 e0       	ldi	r27, 0x02	; 2
						for(int i = 0; i < 7; i++) {
							OutGoingReport.ReportData[i] = led_values_temp[i];
     e0a:	81 91       	ld	r24, Z+
     e0c:	8d 93       	st	X+, r24
					disable_vibration_motors();
					// Turn off everything
					break;
				case 'G':
					if(HIDReportEcho.ReportData[1] == '0') {
						for(int i = 0; i < 7; i++) {
     e0e:	91 e0       	ldi	r25, 0x01	; 1
     e10:	ed 31       	cpi	r30, 0x1D	; 29
     e12:	f9 07       	cpc	r31, r25
     e14:	d1 f7       	brne	.-12     	; 0xe0a <__stack+0x30b>
     e16:	6b c0       	rjmp	.+214    	; 0xeee <__stack+0x3ef>
							OutGoingReport.ReportData[i] = led_values_temp[i];
						}
					}
					else if(HIDReportEcho.ReportData[1] == '1') {
     e18:	81 33       	cpi	r24, 0x31	; 49
     e1a:	e9 f4       	brne	.+58     	; 0xe56 <__stack+0x357>
						for(int i = 7; i < 10; i++) {
							OutGoingReport.ReportData[i-7] = led_values_temp[i];
     e1c:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <led_values_temp+0x7>
     e20:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <OutGoingReport+0x3>
     e24:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <led_values_temp+0x8>
     e28:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <OutGoingReport+0x4>
     e2c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <led_values_temp+0x9>
     e30:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <OutGoingReport+0x5>
						}
						for(int i = 0; i < 4; i++) {
							OutGoingReport.ReportData[i+3] = servo_values_temp[i];
     e34:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <servo_values_temp>
     e38:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <OutGoingReport+0x6>
     e3c:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <servo_values_temp+0x1>
     e40:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <OutGoingReport+0x7>
     e44:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <servo_values_temp+0x2>
     e48:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <OutGoingReport+0x8>
     e4c:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <servo_values_temp+0x3>
     e50:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <OutGoingReport+0x9>
     e54:	4c c0       	rjmp	.+152    	; 0xeee <__stack+0x3ef>
						}
					}
					else if(HIDReportEcho.ReportData[1] == '2') {
     e56:	82 33       	cpi	r24, 0x32	; 50
     e58:	c9 f4       	brne	.+50     	; 0xe8c <__stack+0x38d>
						for(int i = 0; i < 4; i++) {
							OutGoingReport.ReportData[i] = motor_vals[i];
     e5a:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <motor_vals>
     e5e:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <OutGoingReport+0x3>
     e62:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <motor_vals+0x1>
     e66:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <OutGoingReport+0x4>
     e6a:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <motor_vals+0x2>
     e6e:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <OutGoingReport+0x5>
     e72:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <motor_vals+0x3>
     e76:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <OutGoingReport+0x6>
						}
						OutGoingReport.ReportData[4] = vbr_values_temp[0];
     e7a:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <vbr_values_temp>
     e7e:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <OutGoingReport+0x7>
						OutGoingReport.ReportData[5] = vbr_values_temp[1];
     e82:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <vbr_values_temp+0x1>
     e86:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <OutGoingReport+0x8>
     e8a:	31 c0       	rjmp	.+98     	; 0xeee <__stack+0x3ef>
					}
					else if(HIDReportEcho.ReportData[1] == '3') {
     e8c:	83 33       	cpi	r24, 0x33	; 51
     e8e:	99 f4       	brne	.+38     	; 0xeb6 <__stack+0x3b7>
						OutGoingReport.ReportData[0] = read_sensor(SENSOR1);
     e90:	86 e6       	ldi	r24, 0x66	; 102
     e92:	94 d9       	rcall	.-3288   	; 0x1bc <read_sensor>
     e94:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <OutGoingReport+0x3>
						OutGoingReport.ReportData[1] = read_sensor(SENSOR2);
     e98:	85 e6       	ldi	r24, 0x65	; 101
     e9a:	90 d9       	rcall	.-3296   	; 0x1bc <read_sensor>
     e9c:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <OutGoingReport+0x4>
						OutGoingReport.ReportData[2] = read_sensor(SENSOR3);
     ea0:	84 e6       	ldi	r24, 0x64	; 100
     ea2:	8c d9       	rcall	.-3304   	; 0x1bc <read_sensor>
     ea4:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <OutGoingReport+0x5>
						OutGoingReport.ReportData[3] = read_sensor(SENSOR4);
     ea8:	81 e6       	ldi	r24, 0x61	; 97
     eaa:	88 d9       	rcall	.-3312   	; 0x1bc <read_sensor>
     eac:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <OutGoingReport+0x6>
						OutGoingReport.ReportData[4] = read_sensor(EXT_PWR);
     eb0:	80 e6       	ldi	r24, 0x60	; 96
     eb2:	84 d9       	rcall	.-3320   	; 0x1bc <read_sensor>
     eb4:	0d c0       	rjmp	.+26     	; 0xed0 <__stack+0x3d1>

					}
					// Returns hardware/firmware version
					else if(HIDReportEcho.ReportData[1] == '4') {
     eb6:	84 33       	cpi	r24, 0x34	; 52
     eb8:	d1 f4       	brne	.+52     	; 0xeee <__stack+0x3ef>
						// hardware version
						OutGoingReport.ReportData[0] = 3;
     eba:	83 e0       	ldi	r24, 0x03	; 3
     ebc:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <OutGoingReport+0x3>
						OutGoingReport.ReportData[1] = 0;
     ec0:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <OutGoingReport+0x4>
						// firmware version
						OutGoingReport.ReportData[2] = MAJOR_FIRMWARE_VERSION;
     ec4:	92 e0       	ldi	r25, 0x02	; 2
     ec6:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <OutGoingReport+0x5>
						OutGoingReport.ReportData[3] = MINOR_FIRMWARE_VERSION;
     eca:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <OutGoingReport+0x6>
						OutGoingReport.ReportData[4] = MINOR_FIRMWARE_VERSION2;
     ece:	81 e6       	ldi	r24, 0x61	; 97
     ed0:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <OutGoingReport+0x7>
     ed4:	0c c0       	rjmp	.+24     	; 0xeee <__stack+0x3ef>

					}
					break;
				// Returns an incrementing counter - used to measure cycle time and as a keep-alive.
				case 'z':
					OutGoingReport.ReportData[0] = count;
     ed6:	a0 92 4e 02 	sts	0x024E, r10	; 0x80024e <OutGoingReport+0x3>
					count++;
     eda:	ef ef       	ldi	r30, 0xFF	; 255
     edc:	ae 1a       	sub	r10, r30
     ede:	be 0a       	sbc	r11, r30
					if(count > 255) {
     ee0:	ff ef       	ldi	r31, 0xFF	; 255
     ee2:	af 16       	cp	r10, r31
     ee4:	b1 04       	cpc	r11, r1
     ee6:	19 f0       	breq	.+6      	; 0xeee <__stack+0x3ef>
     ee8:	14 f0       	brlt	.+4      	; 0xeee <__stack+0x3ef>
						count = 0;
     eea:	a1 2c       	mov	r10, r1
     eec:	b1 2c       	mov	r11, r1
					break;
			}
			// Only if there was valid data, set the last byte of the outgoing report, and reset the exit_count, max_count things
			if(usb_data == 1) {
				// Reset idle mode
				if(HIDReportEcho.ReportData[0] == 'R')
     eee:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <HIDReportEcho+0x3>
     ef2:	82 35       	cpi	r24, 0x52	; 82
     ef4:	19 f4       	brne	.+6      	; 0xefc <__stack+0x3fd>
				{
					activity_state = 0;
     ef6:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <activity_state>
     efa:	03 c0       	rjmp	.+6      	; 0xf02 <__stack+0x403>
					exit_count = max_count+5;
				}
				else
					activity_state = 1;
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <activity_state>
				HIDReportEcho.ReportData[0] = 0x00;
     f02:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <HIDReportEcho+0x3>
				// Sets last byte of outgoing report to last byte of incoming report so an outgoing report can be matched to its incoming request
				OutGoingReport.ReportData[7]= HIDReportEcho.ReportData[7];
     f06:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <HIDReportEcho+0xa>
     f0a:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <OutGoingReport+0xa>
				exit_count = 0;
				max_count = 500000;
     f0e:	80 e2       	ldi	r24, 0x20	; 32
     f10:	48 2e       	mov	r4, r24
     f12:	81 ea       	ldi	r24, 0xA1	; 161
     f14:	58 2e       	mov	r5, r24
     f16:	87 e0       	ldi	r24, 0x07	; 7
     f18:	68 2e       	mov	r6, r24
     f1a:	71 2c       	mov	r7, r1
     f1c:	56 cd       	rjmp	.-1364   	; 0x9ca <main+0x262>

00000f1e <EVENT_USB_Device_Connect>:
}	
*/

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
     f1e:	08 95       	ret

00000f20 <EVENT_USB_Device_Disconnect>:
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	activity_state=0;
     f20:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <activity_state>
	turn_off_motors();
     f24:	75 d9       	rcall	.-3350   	; 0x210 <turn_off_motors>
	turn_off_leds();
     f26:	f0 db       	rcall	.-2080   	; 0x708 <turn_off_leds>
	disable_servos();
     f28:	a5 d9       	rcall	.-3254   	; 0x274 <disable_servos>
	disable_vibration_motors();
     f2a:	3d ca       	rjmp	.-2950   	; 0x3a6 <disable_vibration_motors>

00000f2c <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Generic_HID_Interface);
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	91 e0       	ldi	r25, 0x01	; 1
     f30:	56 d6       	rcall	.+3244   	; 0x1bde <HID_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     f32:	e2 ee       	ldi	r30, 0xE2	; 226
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	84 60       	ori	r24, 0x04	; 4
     f3a:	80 83       	st	Z, r24
     f3c:	08 95       	ret

00000f3e <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Generic_HID_Interface);
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	91 e0       	ldi	r25, 0x01	; 1
     f42:	19 c5       	rjmp	.+2610   	; 0x1976 <HID_Device_ProcessControlRequest>

00000f44 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     f44:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <Generic_HID_Interface+0xe>
     f48:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <Generic_HID_Interface+0xf>
     f4c:	00 97       	sbiw	r24, 0x00	; 0
     f4e:	29 f0       	breq	.+10     	; 0xf5a <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     f50:	01 97       	sbiw	r24, 0x01	; 1
     f52:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <Generic_HID_Interface+0xf>
     f56:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <Generic_HID_Interface+0xe>
     f5a:	08 95       	ret

00000f5c <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     f5c:	0f 93       	push	r16
     f5e:	1f 93       	push	r17
	if (OutGoingReport.ReportID)
     f60:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <OutGoingReport>
     f64:	99 23       	and	r25, r25
     f66:	11 f0       	breq	.+4      	; 0xf6c <CALLBACK_HID_Device_CreateHIDReport+0x10>
	  *ReportID = OutGoingReport.ReportID;
     f68:	fb 01       	movw	r30, r22
     f6a:	90 83       	st	Z, r25

	memcpy(ReportData, OutGoingReport.ReportData, OutGoingReport.ReportSize);
     f6c:	40 91 4c 02 	lds	r20, 0x024C	; 0x80024c <OutGoingReport+0x1>
     f70:	50 91 4d 02 	lds	r21, 0x024D	; 0x80024d <OutGoingReport+0x2>
     f74:	6e e4       	ldi	r22, 0x4E	; 78
     f76:	72 e0       	ldi	r23, 0x02	; 2
     f78:	c9 01       	movw	r24, r18
     f7a:	19 d7       	rcall	.+3634   	; 0x1dae <memcpy>

	*ReportSize = OutGoingReport.ReportSize;
     f7c:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <OutGoingReport+0x1>
     f80:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <OutGoingReport+0x2>
     f84:	f8 01       	movw	r30, r16
     f86:	91 83       	std	Z+1, r25	; 0x01
     f88:	80 83       	st	Z, r24
	return false;
}
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	1f 91       	pop	r17
     f8e:	0f 91       	pop	r16
     f90:	08 95       	ret

00000f92 <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
     f92:	0f 93       	push	r16
     f94:	1f 93       	push	r17
     f96:	a8 01       	movw	r20, r16
	HIDReportEcho.ReportID   = ReportID;
     f98:	a0 e4       	ldi	r26, 0x40	; 64
     f9a:	b2 e0       	ldi	r27, 0x02	; 2
     f9c:	6c 93       	st	X, r22
	OutGoingReport.ReportID   = ReportID;
     f9e:	eb e4       	ldi	r30, 0x4B	; 75
     fa0:	f2 e0       	ldi	r31, 0x02	; 2
     fa2:	60 83       	st	Z, r22

	HIDReportEcho.ReportSize = ReportSize;
     fa4:	12 96       	adiw	r26, 0x02	; 2
     fa6:	1c 93       	st	X, r17
     fa8:	0e 93       	st	-X, r16
     faa:	11 97       	sbiw	r26, 0x01	; 1
	OutGoingReport.ReportSize = ReportSize;
     fac:	12 83       	std	Z+2, r17	; 0x02
     fae:	01 83       	std	Z+1, r16	; 0x01
	memcpy(HIDReportEcho.ReportData, ReportData, ReportSize);
     fb0:	b9 01       	movw	r22, r18
     fb2:	83 e4       	ldi	r24, 0x43	; 67
     fb4:	92 e0       	ldi	r25, 0x02	; 2
}
     fb6:	1f 91       	pop	r17
     fb8:	0f 91       	pop	r16
	HIDReportEcho.ReportID   = ReportID;
	OutGoingReport.ReportID   = ReportID;

	HIDReportEcho.ReportSize = ReportSize;
	OutGoingReport.ReportSize = ReportSize;
	memcpy(HIDReportEcho.ReportData, ReportData, ReportSize);
     fba:	f9 c6       	rjmp	.+3570   	; 0x1dae <memcpy>

00000fbc <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     fbc:	29 2f       	mov	r18, r25
     fbe:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     fc0:	23 30       	cpi	r18, 0x03	; 3
     fc2:	31 05       	cpc	r19, r1
     fc4:	e1 f0       	breq	.+56     	; 0xffe <CALLBACK_USB_GetDescriptor+0x42>
     fc6:	5c f4       	brge	.+22     	; 0xfde <CALLBACK_USB_GetDescriptor+0x22>
     fc8:	21 30       	cpi	r18, 0x01	; 1
     fca:	31 05       	cpc	r19, r1
     fcc:	99 f0       	breq	.+38     	; 0xff4 <CALLBACK_USB_GetDescriptor+0x38>
     fce:	22 30       	cpi	r18, 0x02	; 2
     fd0:	31 05       	cpc	r19, r1
     fd2:	79 f5       	brne	.+94     	; 0x1032 <CALLBACK_USB_GetDescriptor+0x76>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     fd4:	82 e2       	ldi	r24, 0x22	; 34
     fd6:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     fd8:	26 e1       	ldi	r18, 0x16	; 22
     fda:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     fdc:	2e c0       	rjmp	.+92     	; 0x103a <CALLBACK_USB_GetDescriptor+0x7e>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     fde:	21 32       	cpi	r18, 0x21	; 33
     fe0:	31 05       	cpc	r19, r1
     fe2:	11 f1       	breq	.+68     	; 0x1028 <CALLBACK_USB_GetDescriptor+0x6c>
     fe4:	22 32       	cpi	r18, 0x22	; 34
     fe6:	31 05       	cpc	r19, r1
     fe8:	21 f5       	brne	.+72     	; 0x1032 <CALLBACK_USB_GetDescriptor+0x76>
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
     fea:	80 e2       	ldi	r24, 0x20	; 32
     fec:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &GenericReport;
     fee:	2a e4       	ldi	r18, 0x4A	; 74
     ff0:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(GenericReport);
			break;
     ff2:	23 c0       	rjmp	.+70     	; 0x103a <CALLBACK_USB_GetDescriptor+0x7e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     ff4:	82 e1       	ldi	r24, 0x12	; 18
     ff6:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     ff8:	28 e3       	ldi	r18, 0x38	; 56
     ffa:	31 e0       	ldi	r19, 0x01	; 1
     ffc:	1e c0       	rjmp	.+60     	; 0x103a <CALLBACK_USB_GetDescriptor+0x7e>
     ffe:	99 27       	eor	r25, r25
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
    1000:	81 30       	cpi	r24, 0x01	; 1
    1002:	91 05       	cpc	r25, r1
    1004:	41 f0       	breq	.+16     	; 0x1016 <CALLBACK_USB_GetDescriptor+0x5a>
    1006:	82 30       	cpi	r24, 0x02	; 2
    1008:	91 05       	cpc	r25, r1
    100a:	41 f0       	breq	.+16     	; 0x101c <CALLBACK_USB_GetDescriptor+0x60>
    100c:	89 2b       	or	r24, r25
    100e:	89 f4       	brne	.+34     	; 0x1032 <CALLBACK_USB_GetDescriptor+0x76>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
    1010:	e2 e1       	ldi	r30, 0x12	; 18
    1012:	f1 e0       	ldi	r31, 0x01	; 1
    1014:	05 c0       	rjmp	.+10     	; 0x1020 <CALLBACK_USB_GetDescriptor+0x64>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    1016:	e2 ee       	ldi	r30, 0xE2	; 226
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <CALLBACK_USB_GetDescriptor+0x64>
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    101c:	e0 ec       	ldi	r30, 0xC0	; 192
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	84 91       	lpm	r24, Z
    1022:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
    1024:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
    1026:	09 c0       	rjmp	.+18     	; 0x103a <CALLBACK_USB_GetDescriptor+0x7e>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
    1028:	89 e0       	ldi	r24, 0x09	; 9
    102a:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
    102c:	28 e2       	ldi	r18, 0x28	; 40
    102e:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
    1030:	04 c0       	rjmp	.+8      	; 0x103a <CALLBACK_USB_GetDescriptor+0x7e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	30 e0       	ldi	r19, 0x00	; 0
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
			break;
	}

	*DescriptorAddress = Address;
    103a:	fa 01       	movw	r30, r20
    103c:	31 83       	std	Z+1, r19	; 0x01
    103e:	20 83       	st	Z, r18
	return Size;
}
    1040:	08 95       	ret

00001042 <Endpoint_Write_Stream_LE>:
    1042:	cf 92       	push	r12
    1044:	df 92       	push	r13
    1046:	ef 92       	push	r14
    1048:	ff 92       	push	r15
    104a:	0f 93       	push	r16
    104c:	1f 93       	push	r17
    104e:	cf 93       	push	r28
    1050:	df 93       	push	r29
    1052:	ec 01       	movw	r28, r24
    1054:	8b 01       	movw	r16, r22
    1056:	7a 01       	movw	r14, r20
    1058:	d6 d1       	rcall	.+940    	; 0x1406 <Endpoint_WaitUntilReady>
    105a:	81 11       	cpse	r24, r1
    105c:	33 c0       	rjmp	.+102    	; 0x10c4 <Endpoint_Write_Stream_LE+0x82>
    105e:	e1 14       	cp	r14, r1
    1060:	f1 04       	cpc	r15, r1
    1062:	39 f0       	breq	.+14     	; 0x1072 <Endpoint_Write_Stream_LE+0x30>
    1064:	f7 01       	movw	r30, r14
    1066:	80 81       	ld	r24, Z
    1068:	91 81       	ldd	r25, Z+1	; 0x01
    106a:	08 1b       	sub	r16, r24
    106c:	19 0b       	sbc	r17, r25
    106e:	c8 0f       	add	r28, r24
    1070:	d9 1f       	adc	r29, r25
    1072:	c1 2c       	mov	r12, r1
    1074:	d1 2c       	mov	r13, r1
    1076:	01 15       	cp	r16, r1
    1078:	11 05       	cpc	r17, r1
    107a:	19 f1       	breq	.+70     	; 0x10c2 <Endpoint_Write_Stream_LE+0x80>
    107c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1080:	85 fd       	sbrc	r24, 5
    1082:	16 c0       	rjmp	.+44     	; 0x10b0 <Endpoint_Write_Stream_LE+0x6e>
    1084:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1088:	8e 77       	andi	r24, 0x7E	; 126
    108a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    108e:	59 d4       	rcall	.+2226   	; 0x1942 <USB_USBTask>
    1090:	e1 14       	cp	r14, r1
    1092:	f1 04       	cpc	r15, r1
    1094:	49 f0       	breq	.+18     	; 0x10a8 <Endpoint_Write_Stream_LE+0x66>
    1096:	f7 01       	movw	r30, r14
    1098:	80 81       	ld	r24, Z
    109a:	91 81       	ldd	r25, Z+1	; 0x01
    109c:	c8 0e       	add	r12, r24
    109e:	d9 1e       	adc	r13, r25
    10a0:	d1 82       	std	Z+1, r13	; 0x01
    10a2:	c0 82       	st	Z, r12
    10a4:	85 e0       	ldi	r24, 0x05	; 5
    10a6:	0e c0       	rjmp	.+28     	; 0x10c4 <Endpoint_Write_Stream_LE+0x82>
    10a8:	ae d1       	rcall	.+860    	; 0x1406 <Endpoint_WaitUntilReady>
    10aa:	88 23       	and	r24, r24
    10ac:	21 f3       	breq	.-56     	; 0x1076 <Endpoint_Write_Stream_LE+0x34>
    10ae:	0a c0       	rjmp	.+20     	; 0x10c4 <Endpoint_Write_Stream_LE+0x82>
    10b0:	89 91       	ld	r24, Y+
    10b2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    10b6:	01 50       	subi	r16, 0x01	; 1
    10b8:	11 09       	sbc	r17, r1
    10ba:	ff ef       	ldi	r31, 0xFF	; 255
    10bc:	cf 1a       	sub	r12, r31
    10be:	df 0a       	sbc	r13, r31
    10c0:	da cf       	rjmp	.-76     	; 0x1076 <Endpoint_Write_Stream_LE+0x34>
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	1f 91       	pop	r17
    10ca:	0f 91       	pop	r16
    10cc:	ff 90       	pop	r15
    10ce:	ef 90       	pop	r14
    10d0:	df 90       	pop	r13
    10d2:	cf 90       	pop	r12
    10d4:	08 95       	ret

000010d6 <Endpoint_Write_Control_Stream_LE>:
    10d6:	20 91 63 03 	lds	r18, 0x0363	; 0x800363 <USB_ControlRequest+0x6>
    10da:	30 91 64 03 	lds	r19, 0x0364	; 0x800364 <USB_ControlRequest+0x7>
    10de:	26 17       	cp	r18, r22
    10e0:	37 07       	cpc	r19, r23
    10e2:	48 f0       	brcs	.+18     	; 0x10f6 <Endpoint_Write_Control_Stream_LE+0x20>
    10e4:	61 15       	cp	r22, r1
    10e6:	71 05       	cpc	r23, r1
    10e8:	39 f4       	brne	.+14     	; 0x10f8 <Endpoint_Write_Control_Stream_LE+0x22>
    10ea:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10ee:	2e 77       	andi	r18, 0x7E	; 126
    10f0:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10f4:	01 c0       	rjmp	.+2      	; 0x10f8 <Endpoint_Write_Control_Stream_LE+0x22>
    10f6:	b9 01       	movw	r22, r18
    10f8:	40 e0       	ldi	r20, 0x00	; 0
    10fa:	61 15       	cp	r22, r1
    10fc:	71 05       	cpc	r23, r1
    10fe:	a9 f1       	breq	.+106    	; 0x116a <Endpoint_Write_Control_Stream_LE+0x94>
    1100:	20 91 5c 03 	lds	r18, 0x035C	; 0x80035c <USB_DeviceState>
    1104:	22 23       	and	r18, r18
    1106:	09 f4       	brne	.+2      	; 0x110a <Endpoint_Write_Control_Stream_LE+0x34>
    1108:	41 c0       	rjmp	.+130    	; 0x118c <Endpoint_Write_Control_Stream_LE+0xb6>
    110a:	25 30       	cpi	r18, 0x05	; 5
    110c:	09 f4       	brne	.+2      	; 0x1110 <Endpoint_Write_Control_Stream_LE+0x3a>
    110e:	40 c0       	rjmp	.+128    	; 0x1190 <Endpoint_Write_Control_Stream_LE+0xba>
    1110:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1114:	23 fd       	sbrc	r18, 3
    1116:	38 c0       	rjmp	.+112    	; 0x1188 <Endpoint_Write_Control_Stream_LE+0xb2>
    1118:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    111c:	22 fd       	sbrc	r18, 2
    111e:	2e c0       	rjmp	.+92     	; 0x117c <Endpoint_Write_Control_Stream_LE+0xa6>
    1120:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1124:	20 ff       	sbrs	r18, 0
    1126:	e9 cf       	rjmp	.-46     	; 0x10fa <Endpoint_Write_Control_Stream_LE+0x24>
    1128:	40 91 f3 00 	lds	r20, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    112c:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	34 2b       	or	r19, r20
    1134:	fc 01       	movw	r30, r24
    1136:	cf 01       	movw	r24, r30
    1138:	61 15       	cp	r22, r1
    113a:	71 05       	cpc	r23, r1
    113c:	59 f0       	breq	.+22     	; 0x1154 <Endpoint_Write_Control_Stream_LE+0x7e>
    113e:	28 30       	cpi	r18, 0x08	; 8
    1140:	31 05       	cpc	r19, r1
    1142:	40 f4       	brcc	.+16     	; 0x1154 <Endpoint_Write_Control_Stream_LE+0x7e>
    1144:	81 91       	ld	r24, Z+
    1146:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    114a:	61 50       	subi	r22, 0x01	; 1
    114c:	71 09       	sbc	r23, r1
    114e:	2f 5f       	subi	r18, 0xFF	; 255
    1150:	3f 4f       	sbci	r19, 0xFF	; 255
    1152:	f1 cf       	rjmp	.-30     	; 0x1136 <Endpoint_Write_Control_Stream_LE+0x60>
    1154:	41 e0       	ldi	r20, 0x01	; 1
    1156:	28 30       	cpi	r18, 0x08	; 8
    1158:	31 05       	cpc	r19, r1
    115a:	09 f0       	breq	.+2      	; 0x115e <Endpoint_Write_Control_Stream_LE+0x88>
    115c:	40 e0       	ldi	r20, 0x00	; 0
    115e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1162:	2e 77       	andi	r18, 0x7E	; 126
    1164:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1168:	c8 cf       	rjmp	.-112    	; 0x10fa <Endpoint_Write_Control_Stream_LE+0x24>
    116a:	41 11       	cpse	r20, r1
    116c:	c9 cf       	rjmp	.-110    	; 0x1100 <Endpoint_Write_Control_Stream_LE+0x2a>
    116e:	06 c0       	rjmp	.+12     	; 0x117c <Endpoint_Write_Control_Stream_LE+0xa6>
    1170:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <USB_DeviceState>
    1174:	88 23       	and	r24, r24
    1176:	51 f0       	breq	.+20     	; 0x118c <Endpoint_Write_Control_Stream_LE+0xb6>
    1178:	85 30       	cpi	r24, 0x05	; 5
    117a:	51 f0       	breq	.+20     	; 0x1190 <Endpoint_Write_Control_Stream_LE+0xba>
    117c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1180:	82 ff       	sbrs	r24, 2
    1182:	f6 cf       	rjmp	.-20     	; 0x1170 <Endpoint_Write_Control_Stream_LE+0x9a>
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	08 95       	ret
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	08 95       	ret
    118c:	82 e0       	ldi	r24, 0x02	; 2
    118e:	08 95       	ret
    1190:	83 e0       	ldi	r24, 0x03	; 3
    1192:	08 95       	ret

00001194 <Endpoint_Read_Control_Stream_LE>:
    1194:	61 15       	cp	r22, r1
    1196:	71 05       	cpc	r23, r1
    1198:	29 f4       	brne	.+10     	; 0x11a4 <Endpoint_Read_Control_Stream_LE+0x10>
    119a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    119e:	2b 77       	andi	r18, 0x7B	; 123
    11a0:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    11a4:	fc 01       	movw	r30, r24
    11a6:	61 15       	cp	r22, r1
    11a8:	71 05       	cpc	r23, r1
    11aa:	41 f1       	breq	.+80     	; 0x11fc <Endpoint_Read_Control_Stream_LE+0x68>
    11ac:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <USB_DeviceState>
    11b0:	88 23       	and	r24, r24
    11b2:	61 f1       	breq	.+88     	; 0x120c <Endpoint_Read_Control_Stream_LE+0x78>
    11b4:	85 30       	cpi	r24, 0x05	; 5
    11b6:	61 f1       	breq	.+88     	; 0x1210 <Endpoint_Read_Control_Stream_LE+0x7c>
    11b8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    11bc:	83 fd       	sbrc	r24, 3
    11be:	24 c0       	rjmp	.+72     	; 0x1208 <Endpoint_Read_Control_Stream_LE+0x74>
    11c0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    11c4:	82 ff       	sbrs	r24, 2
    11c6:	ef cf       	rjmp	.-34     	; 0x11a6 <Endpoint_Read_Control_Stream_LE+0x12>
    11c8:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    11cc:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	92 2b       	or	r25, r18
    11d4:	89 2b       	or	r24, r25
    11d6:	31 f0       	breq	.+12     	; 0x11e4 <Endpoint_Read_Control_Stream_LE+0x50>
    11d8:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    11dc:	81 93       	st	Z+, r24
    11de:	61 50       	subi	r22, 0x01	; 1
    11e0:	71 09       	sbc	r23, r1
    11e2:	91 f7       	brne	.-28     	; 0x11c8 <Endpoint_Read_Control_Stream_LE+0x34>
    11e4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    11e8:	8b 77       	andi	r24, 0x7B	; 123
    11ea:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    11ee:	db cf       	rjmp	.-74     	; 0x11a6 <Endpoint_Read_Control_Stream_LE+0x12>
    11f0:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <USB_DeviceState>
    11f4:	88 23       	and	r24, r24
    11f6:	51 f0       	breq	.+20     	; 0x120c <Endpoint_Read_Control_Stream_LE+0x78>
    11f8:	85 30       	cpi	r24, 0x05	; 5
    11fa:	51 f0       	breq	.+20     	; 0x1210 <Endpoint_Read_Control_Stream_LE+0x7c>
    11fc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1200:	80 ff       	sbrs	r24, 0
    1202:	f6 cf       	rjmp	.-20     	; 0x11f0 <Endpoint_Read_Control_Stream_LE+0x5c>
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	08 95       	ret
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	08 95       	ret
    120c:	82 e0       	ldi	r24, 0x02	; 2
    120e:	08 95       	ret
    1210:	83 e0       	ldi	r24, 0x03	; 3
    1212:	08 95       	ret

00001214 <Endpoint_Write_Control_PStream_LE>:
    1214:	20 91 63 03 	lds	r18, 0x0363	; 0x800363 <USB_ControlRequest+0x6>
    1218:	30 91 64 03 	lds	r19, 0x0364	; 0x800364 <USB_ControlRequest+0x7>
    121c:	26 17       	cp	r18, r22
    121e:	37 07       	cpc	r19, r23
    1220:	48 f0       	brcs	.+18     	; 0x1234 <Endpoint_Write_Control_PStream_LE+0x20>
    1222:	61 15       	cp	r22, r1
    1224:	71 05       	cpc	r23, r1
    1226:	39 f4       	brne	.+14     	; 0x1236 <Endpoint_Write_Control_PStream_LE+0x22>
    1228:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    122c:	2e 77       	andi	r18, 0x7E	; 126
    122e:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1232:	01 c0       	rjmp	.+2      	; 0x1236 <Endpoint_Write_Control_PStream_LE+0x22>
    1234:	b9 01       	movw	r22, r18
    1236:	fc 01       	movw	r30, r24
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	61 15       	cp	r22, r1
    123c:	71 05       	cpc	r23, r1
    123e:	91 f1       	breq	.+100    	; 0x12a4 <Endpoint_Write_Control_PStream_LE+0x90>
    1240:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <USB_DeviceState>
    1244:	88 23       	and	r24, r24
    1246:	09 f4       	brne	.+2      	; 0x124a <Endpoint_Write_Control_PStream_LE+0x36>
    1248:	3e c0       	rjmp	.+124    	; 0x12c6 <Endpoint_Write_Control_PStream_LE+0xb2>
    124a:	85 30       	cpi	r24, 0x05	; 5
    124c:	09 f4       	brne	.+2      	; 0x1250 <Endpoint_Write_Control_PStream_LE+0x3c>
    124e:	3d c0       	rjmp	.+122    	; 0x12ca <Endpoint_Write_Control_PStream_LE+0xb6>
    1250:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1254:	83 fd       	sbrc	r24, 3
    1256:	35 c0       	rjmp	.+106    	; 0x12c2 <Endpoint_Write_Control_PStream_LE+0xae>
    1258:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    125c:	82 fd       	sbrc	r24, 2
    125e:	2b c0       	rjmp	.+86     	; 0x12b6 <Endpoint_Write_Control_PStream_LE+0xa2>
    1260:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1264:	80 ff       	sbrs	r24, 0
    1266:	e9 cf       	rjmp	.-46     	; 0x123a <Endpoint_Write_Control_PStream_LE+0x26>
    1268:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    126c:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	92 2b       	or	r25, r18
    1274:	61 15       	cp	r22, r1
    1276:	71 05       	cpc	r23, r1
    1278:	59 f0       	breq	.+22     	; 0x1290 <Endpoint_Write_Control_PStream_LE+0x7c>
    127a:	88 30       	cpi	r24, 0x08	; 8
    127c:	91 05       	cpc	r25, r1
    127e:	40 f4       	brcc	.+16     	; 0x1290 <Endpoint_Write_Control_PStream_LE+0x7c>
    1280:	24 91       	lpm	r18, Z
    1282:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1286:	31 96       	adiw	r30, 0x01	; 1
    1288:	61 50       	subi	r22, 0x01	; 1
    128a:	71 09       	sbc	r23, r1
    128c:	01 96       	adiw	r24, 0x01	; 1
    128e:	f2 cf       	rjmp	.-28     	; 0x1274 <Endpoint_Write_Control_PStream_LE+0x60>
    1290:	21 e0       	ldi	r18, 0x01	; 1
    1292:	08 97       	sbiw	r24, 0x08	; 8
    1294:	09 f0       	breq	.+2      	; 0x1298 <Endpoint_Write_Control_PStream_LE+0x84>
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    129c:	8e 77       	andi	r24, 0x7E	; 126
    129e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12a2:	cb cf       	rjmp	.-106    	; 0x123a <Endpoint_Write_Control_PStream_LE+0x26>
    12a4:	21 11       	cpse	r18, r1
    12a6:	cc cf       	rjmp	.-104    	; 0x1240 <Endpoint_Write_Control_PStream_LE+0x2c>
    12a8:	06 c0       	rjmp	.+12     	; 0x12b6 <Endpoint_Write_Control_PStream_LE+0xa2>
    12aa:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <USB_DeviceState>
    12ae:	88 23       	and	r24, r24
    12b0:	51 f0       	breq	.+20     	; 0x12c6 <Endpoint_Write_Control_PStream_LE+0xb2>
    12b2:	85 30       	cpi	r24, 0x05	; 5
    12b4:	51 f0       	breq	.+20     	; 0x12ca <Endpoint_Write_Control_PStream_LE+0xb6>
    12b6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12ba:	82 ff       	sbrs	r24, 2
    12bc:	f6 cf       	rjmp	.-20     	; 0x12aa <Endpoint_Write_Control_PStream_LE+0x96>
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	08 95       	ret
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	08 95       	ret
    12c6:	82 e0       	ldi	r24, 0x02	; 2
    12c8:	08 95       	ret
    12ca:	83 e0       	ldi	r24, 0x03	; 3
    12cc:	08 95       	ret

000012ce <Endpoint_ConfigureEndpoint_Prv>:
    12ce:	98 2f       	mov	r25, r24
    12d0:	97 30       	cpi	r25, 0x07	; 7
    12d2:	58 f5       	brcc	.+86     	; 0x132a <Endpoint_ConfigureEndpoint_Prv+0x5c>
    12d4:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    12d8:	98 17       	cp	r25, r24
    12da:	39 f0       	breq	.+14     	; 0x12ea <Endpoint_ConfigureEndpoint_Prv+0x1c>
    12dc:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    12e0:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    12e4:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    12e8:	03 c0       	rjmp	.+6      	; 0x12f0 <Endpoint_ConfigureEndpoint_Prv+0x22>
    12ea:	24 2f       	mov	r18, r20
    12ec:	76 2f       	mov	r23, r22
    12ee:	50 e0       	ldi	r21, 0x00	; 0
    12f0:	21 ff       	sbrs	r18, 1
    12f2:	19 c0       	rjmp	.+50     	; 0x1326 <Endpoint_ConfigureEndpoint_Prv+0x58>
    12f4:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    12f8:	3e 7f       	andi	r19, 0xFE	; 254
    12fa:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    12fe:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1302:	3d 7f       	andi	r19, 0xFD	; 253
    1304:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1308:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    130c:	31 60       	ori	r19, 0x01	; 1
    130e:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1312:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1316:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    131a:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    131e:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    1322:	27 ff       	sbrs	r18, 7
    1324:	07 c0       	rjmp	.+14     	; 0x1334 <Endpoint_ConfigureEndpoint_Prv+0x66>
    1326:	9f 5f       	subi	r25, 0xFF	; 255
    1328:	d3 cf       	rjmp	.-90     	; 0x12d0 <Endpoint_ConfigureEndpoint_Prv+0x2>
    132a:	8f 70       	andi	r24, 0x0F	; 15
    132c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	08 95       	ret
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	08 95       	ret

00001338 <Endpoint_ConfigureEndpointTable>:
    1338:	ef 92       	push	r14
    133a:	ff 92       	push	r15
    133c:	0f 93       	push	r16
    133e:	1f 93       	push	r17
    1340:	cf 93       	push	r28
    1342:	df 93       	push	r29
    1344:	e6 2e       	mov	r14, r22
    1346:	ec 01       	movw	r28, r24
    1348:	8c 01       	movw	r16, r24
    134a:	0c 5f       	subi	r16, 0xFC	; 252
    134c:	1f 4f       	sbci	r17, 0xFF	; 255
    134e:	f1 2c       	mov	r15, r1
    1350:	fe 14       	cp	r15, r14
    1352:	91 f1       	breq	.+100    	; 0x13b8 <Endpoint_ConfigureEndpointTable+0x80>
    1354:	58 81       	ld	r21, Y
    1356:	55 23       	and	r21, r21
    1358:	51 f1       	breq	.+84     	; 0x13ae <Endpoint_ConfigureEndpointTable+0x76>
    135a:	f8 01       	movw	r30, r16
    135c:	20 81       	ld	r18, Z
    135e:	69 81       	ldd	r22, Y+1	; 0x01
    1360:	7a 81       	ldd	r23, Y+2	; 0x02
    1362:	31 97       	sbiw	r30, 0x01	; 1
    1364:	90 81       	ld	r25, Z
    1366:	85 2f       	mov	r24, r21
    1368:	8f 70       	andi	r24, 0x0F	; 15
    136a:	87 30       	cpi	r24, 0x07	; 7
    136c:	10 f0       	brcs	.+4      	; 0x1372 <Endpoint_ConfigureEndpointTable+0x3a>
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	24 c0       	rjmp	.+72     	; 0x13ba <Endpoint_ConfigureEndpointTable+0x82>
    1372:	22 30       	cpi	r18, 0x02	; 2
    1374:	10 f4       	brcc	.+4      	; 0x137a <Endpoint_ConfigureEndpointTable+0x42>
    1376:	42 e0       	ldi	r20, 0x02	; 2
    1378:	01 c0       	rjmp	.+2      	; 0x137c <Endpoint_ConfigureEndpointTable+0x44>
    137a:	46 e0       	ldi	r20, 0x06	; 6
    137c:	e8 e0       	ldi	r30, 0x08	; 8
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	e6 17       	cp	r30, r22
    1384:	f7 07       	cpc	r31, r23
    1386:	20 f4       	brcc	.+8      	; 0x1390 <Endpoint_ConfigureEndpointTable+0x58>
    1388:	2f 5f       	subi	r18, 0xFF	; 255
    138a:	ee 0f       	add	r30, r30
    138c:	ff 1f       	adc	r31, r31
    138e:	f9 cf       	rjmp	.-14     	; 0x1382 <Endpoint_ConfigureEndpointTable+0x4a>
    1390:	22 95       	swap	r18
    1392:	20 7f       	andi	r18, 0xF0	; 240
    1394:	42 2b       	or	r20, r18
    1396:	f0 e4       	ldi	r31, 0x40	; 64
    1398:	9f 9f       	mul	r25, r31
    139a:	90 01       	movw	r18, r0
    139c:	11 24       	eor	r1, r1
    139e:	55 1f       	adc	r21, r21
    13a0:	55 27       	eor	r21, r21
    13a2:	55 1f       	adc	r21, r21
    13a4:	65 2f       	mov	r22, r21
    13a6:	62 2b       	or	r22, r18
    13a8:	92 df       	rcall	.-220    	; 0x12ce <Endpoint_ConfigureEndpoint_Prv>
    13aa:	88 23       	and	r24, r24
    13ac:	01 f3       	breq	.-64     	; 0x136e <Endpoint_ConfigureEndpointTable+0x36>
    13ae:	f3 94       	inc	r15
    13b0:	25 96       	adiw	r28, 0x05	; 5
    13b2:	0b 5f       	subi	r16, 0xFB	; 251
    13b4:	1f 4f       	sbci	r17, 0xFF	; 255
    13b6:	cc cf       	rjmp	.-104    	; 0x1350 <Endpoint_ConfigureEndpointTable+0x18>
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	1f 91       	pop	r17
    13c0:	0f 91       	pop	r16
    13c2:	ff 90       	pop	r15
    13c4:	ef 90       	pop	r14
    13c6:	08 95       	ret

000013c8 <Endpoint_ClearStatusStage>:
    13c8:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <USB_ControlRequest>
    13cc:	87 ff       	sbrs	r24, 7
    13ce:	11 c0       	rjmp	.+34     	; 0x13f2 <Endpoint_ClearStatusStage+0x2a>
    13d0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    13d4:	82 fd       	sbrc	r24, 2
    13d6:	05 c0       	rjmp	.+10     	; 0x13e2 <Endpoint_ClearStatusStage+0x1a>
    13d8:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <USB_DeviceState>
    13dc:	81 11       	cpse	r24, r1
    13de:	f8 cf       	rjmp	.-16     	; 0x13d0 <Endpoint_ClearStatusStage+0x8>
    13e0:	11 c0       	rjmp	.+34     	; 0x1404 <Endpoint_ClearStatusStage+0x3c>
    13e2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    13e6:	8b 77       	andi	r24, 0x7B	; 123
    13e8:	0b c0       	rjmp	.+22     	; 0x1400 <Endpoint_ClearStatusStage+0x38>
    13ea:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <USB_DeviceState>
    13ee:	88 23       	and	r24, r24
    13f0:	49 f0       	breq	.+18     	; 0x1404 <Endpoint_ClearStatusStage+0x3c>
    13f2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    13f6:	80 ff       	sbrs	r24, 0
    13f8:	f8 cf       	rjmp	.-16     	; 0x13ea <Endpoint_ClearStatusStage+0x22>
    13fa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    13fe:	8e 77       	andi	r24, 0x7E	; 126
    1400:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1404:	08 95       	ret

00001406 <Endpoint_WaitUntilReady>:
    1406:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    140a:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    140e:	95 e6       	ldi	r25, 0x65	; 101
    1410:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1414:	84 2f       	mov	r24, r20
    1416:	81 70       	andi	r24, 0x01	; 1
    1418:	40 ff       	sbrs	r20, 0
    141a:	22 c0       	rjmp	.+68     	; 0x1460 <Endpoint_WaitUntilReady+0x5a>
    141c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1420:	80 fd       	sbrc	r24, 0
    1422:	1c c0       	rjmp	.+56     	; 0x145c <Endpoint_WaitUntilReady+0x56>
    1424:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <USB_DeviceState>
    1428:	88 23       	and	r24, r24
    142a:	91 f0       	breq	.+36     	; 0x1450 <Endpoint_WaitUntilReady+0x4a>
    142c:	85 30       	cpi	r24, 0x05	; 5
    142e:	91 f0       	breq	.+36     	; 0x1454 <Endpoint_WaitUntilReady+0x4e>
    1430:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1434:	85 fd       	sbrc	r24, 5
    1436:	10 c0       	rjmp	.+32     	; 0x1458 <Endpoint_WaitUntilReady+0x52>
    1438:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    143c:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    1440:	42 17       	cp	r20, r18
    1442:	53 07       	cpc	r21, r19
    1444:	29 f3       	breq	.-54     	; 0x1410 <Endpoint_WaitUntilReady+0xa>
    1446:	9a 01       	movw	r18, r20
    1448:	91 50       	subi	r25, 0x01	; 1
    144a:	11 f7       	brne	.-60     	; 0x1410 <Endpoint_WaitUntilReady+0xa>
    144c:	84 e0       	ldi	r24, 0x04	; 4
    144e:	08 95       	ret
    1450:	82 e0       	ldi	r24, 0x02	; 2
    1452:	08 95       	ret
    1454:	83 e0       	ldi	r24, 0x03	; 3
    1456:	08 95       	ret
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	08 95       	ret
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	08 95       	ret
    1460:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1464:	42 ff       	sbrs	r20, 2
    1466:	de cf       	rjmp	.-68     	; 0x1424 <Endpoint_WaitUntilReady+0x1e>
    1468:	08 95       	ret

0000146a <USB_ResetInterface>:
    146a:	0f 93       	push	r16
    146c:	1f 93       	push	r17
    146e:	cf 93       	push	r28
    1470:	df 93       	push	r29
    1472:	4b d0       	rcall	.+150    	; 0x150a <USB_INT_DisableAllInterrupts>
    1474:	52 d0       	rcall	.+164    	; 0x151a <USB_INT_ClearAllInterrupts>
    1476:	c8 ed       	ldi	r28, 0xD8	; 216
    1478:	d0 e0       	ldi	r29, 0x00	; 0
    147a:	88 81       	ld	r24, Y
    147c:	8f 77       	andi	r24, 0x7F	; 127
    147e:	88 83       	st	Y, r24
    1480:	88 81       	ld	r24, Y
    1482:	80 68       	ori	r24, 0x80	; 128
    1484:	88 83       	st	Y, r24
    1486:	88 81       	ld	r24, Y
    1488:	8f 7d       	andi	r24, 0xDF	; 223
    148a:	88 83       	st	Y, r24
    148c:	19 bc       	out	0x29, r1	; 41
    148e:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <USB_DeviceState>
    1492:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <USB_Device_ConfigurationNumber>
    1496:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <USB_Device_RemoteWakeupEnabled>
    149a:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <USB_Device_CurrentlySelfPowered>
    149e:	00 ee       	ldi	r16, 0xE0	; 224
    14a0:	10 e0       	ldi	r17, 0x00	; 0
    14a2:	f8 01       	movw	r30, r16
    14a4:	80 81       	ld	r24, Z
    14a6:	8b 7f       	andi	r24, 0xFB	; 251
    14a8:	80 83       	st	Z, r24
    14aa:	88 81       	ld	r24, Y
    14ac:	81 60       	ori	r24, 0x01	; 1
    14ae:	88 83       	st	Y, r24
    14b0:	42 e0       	ldi	r20, 0x02	; 2
    14b2:	60 e0       	ldi	r22, 0x00	; 0
    14b4:	80 e0       	ldi	r24, 0x00	; 0
    14b6:	0b df       	rcall	.-490    	; 0x12ce <Endpoint_ConfigureEndpoint_Prv>
    14b8:	e1 ee       	ldi	r30, 0xE1	; 225
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	8e 7f       	andi	r24, 0xFE	; 254
    14c0:	80 83       	st	Z, r24
    14c2:	e2 ee       	ldi	r30, 0xE2	; 226
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	81 60       	ori	r24, 0x01	; 1
    14ca:	80 83       	st	Z, r24
    14cc:	80 81       	ld	r24, Z
    14ce:	88 60       	ori	r24, 0x08	; 8
    14d0:	80 83       	st	Z, r24
    14d2:	f8 01       	movw	r30, r16
    14d4:	80 81       	ld	r24, Z
    14d6:	8e 7f       	andi	r24, 0xFE	; 254
    14d8:	80 83       	st	Z, r24
    14da:	88 81       	ld	r24, Y
    14dc:	80 61       	ori	r24, 0x10	; 16
    14de:	88 83       	st	Y, r24
    14e0:	df 91       	pop	r29
    14e2:	cf 91       	pop	r28
    14e4:	1f 91       	pop	r17
    14e6:	0f 91       	pop	r16
    14e8:	08 95       	ret

000014ea <USB_Init>:
    14ea:	e8 ed       	ldi	r30, 0xD8	; 216
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	8f 7e       	andi	r24, 0xEF	; 239
    14f2:	80 83       	st	Z, r24
    14f4:	e7 ed       	ldi	r30, 0xD7	; 215
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	81 60       	ori	r24, 0x01	; 1
    14fc:	80 83       	st	Z, r24
    14fe:	84 e0       	ldi	r24, 0x04	; 4
    1500:	82 bf       	out	0x32, r24	; 50
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <USB_IsInitialized>
    1508:	b0 cf       	rjmp	.-160    	; 0x146a <USB_ResetInterface>

0000150a <USB_INT_DisableAllInterrupts>:
    150a:	e8 ed       	ldi	r30, 0xD8	; 216
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	8e 7f       	andi	r24, 0xFE	; 254
    1512:	80 83       	st	Z, r24
    1514:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1518:	08 95       	ret

0000151a <USB_INT_ClearAllInterrupts>:
    151a:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    151e:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1522:	08 95       	ret

00001524 <__vector_10>:
    1524:	1f 92       	push	r1
    1526:	0f 92       	push	r0
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	0f 92       	push	r0
    152c:	11 24       	eor	r1, r1
    152e:	2f 93       	push	r18
    1530:	3f 93       	push	r19
    1532:	4f 93       	push	r20
    1534:	5f 93       	push	r21
    1536:	6f 93       	push	r22
    1538:	7f 93       	push	r23
    153a:	8f 93       	push	r24
    153c:	9f 93       	push	r25
    153e:	af 93       	push	r26
    1540:	bf 93       	push	r27
    1542:	ef 93       	push	r30
    1544:	ff 93       	push	r31
    1546:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    154a:	82 ff       	sbrs	r24, 2
    154c:	0a c0       	rjmp	.+20     	; 0x1562 <__vector_10+0x3e>
    154e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1552:	82 ff       	sbrs	r24, 2
    1554:	06 c0       	rjmp	.+12     	; 0x1562 <__vector_10+0x3e>
    1556:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    155a:	8b 7f       	andi	r24, 0xFB	; 251
    155c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1560:	f1 dc       	rcall	.-1566   	; 0xf44 <EVENT_USB_Device_StartOfFrame>
    1562:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    1566:	80 ff       	sbrs	r24, 0
    1568:	1d c0       	rjmp	.+58     	; 0x15a4 <__vector_10+0x80>
    156a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    156e:	80 ff       	sbrs	r24, 0
    1570:	19 c0       	rjmp	.+50     	; 0x15a4 <__vector_10+0x80>
    1572:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    1576:	8e 7f       	andi	r24, 0xFE	; 254
    1578:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    157c:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    1580:	80 ff       	sbrs	r24, 0
    1582:	0c c0       	rjmp	.+24     	; 0x159c <__vector_10+0x78>
    1584:	80 e1       	ldi	r24, 0x10	; 16
    1586:	89 bd       	out	0x29, r24	; 41
    1588:	82 e1       	ldi	r24, 0x12	; 18
    158a:	89 bd       	out	0x29, r24	; 41
    158c:	09 b4       	in	r0, 0x29	; 41
    158e:	00 fe       	sbrs	r0, 0
    1590:	fd cf       	rjmp	.-6      	; 0x158c <__vector_10+0x68>
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <USB_DeviceState>
    1598:	c2 dc       	rcall	.-1660   	; 0xf1e <EVENT_USB_Device_Connect>
    159a:	04 c0       	rjmp	.+8      	; 0x15a4 <__vector_10+0x80>
    159c:	19 bc       	out	0x29, r1	; 41
    159e:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <USB_DeviceState>
    15a2:	be dc       	rcall	.-1668   	; 0xf20 <EVENT_USB_Device_Disconnect>
    15a4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    15a8:	80 ff       	sbrs	r24, 0
    15aa:	18 c0       	rjmp	.+48     	; 0x15dc <__vector_10+0xb8>
    15ac:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    15b0:	80 ff       	sbrs	r24, 0
    15b2:	14 c0       	rjmp	.+40     	; 0x15dc <__vector_10+0xb8>
    15b4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    15b8:	8e 7f       	andi	r24, 0xFE	; 254
    15ba:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    15be:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    15c2:	80 61       	ori	r24, 0x10	; 16
    15c4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    15c8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    15cc:	80 62       	ori	r24, 0x20	; 32
    15ce:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    15d2:	19 bc       	out	0x29, r1	; 41
    15d4:	85 e0       	ldi	r24, 0x05	; 5
    15d6:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <USB_DeviceState>
    15da:	b2 d1       	rcall	.+868    	; 0x1940 <USB_Event_Stub>
    15dc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    15e0:	84 ff       	sbrs	r24, 4
    15e2:	2f c0       	rjmp	.+94     	; 0x1642 <__vector_10+0x11e>
    15e4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    15e8:	84 ff       	sbrs	r24, 4
    15ea:	2b c0       	rjmp	.+86     	; 0x1642 <__vector_10+0x11e>
    15ec:	80 e1       	ldi	r24, 0x10	; 16
    15ee:	89 bd       	out	0x29, r24	; 41
    15f0:	82 e1       	ldi	r24, 0x12	; 18
    15f2:	89 bd       	out	0x29, r24	; 41
    15f4:	09 b4       	in	r0, 0x29	; 41
    15f6:	00 fe       	sbrs	r0, 0
    15f8:	fd cf       	rjmp	.-6      	; 0x15f4 <__vector_10+0xd0>
    15fa:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    15fe:	8f 7d       	andi	r24, 0xDF	; 223
    1600:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1604:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1608:	8f 7e       	andi	r24, 0xEF	; 239
    160a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    160e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1612:	8f 7e       	andi	r24, 0xEF	; 239
    1614:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1618:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    161c:	81 60       	ori	r24, 0x01	; 1
    161e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1622:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <USB_Device_ConfigurationNumber>
    1626:	88 23       	and	r24, r24
    1628:	11 f0       	breq	.+4      	; 0x162e <__vector_10+0x10a>
    162a:	84 e0       	ldi	r24, 0x04	; 4
    162c:	07 c0       	rjmp	.+14     	; 0x163c <__vector_10+0x118>
    162e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1632:	87 fd       	sbrc	r24, 7
    1634:	02 c0       	rjmp	.+4      	; 0x163a <__vector_10+0x116>
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	01 c0       	rjmp	.+2      	; 0x163c <__vector_10+0x118>
    163a:	83 e0       	ldi	r24, 0x03	; 3
    163c:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <USB_DeviceState>
    1640:	7f d1       	rcall	.+766    	; 0x1940 <USB_Event_Stub>
    1642:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1646:	83 ff       	sbrs	r24, 3
    1648:	22 c0       	rjmp	.+68     	; 0x168e <__vector_10+0x16a>
    164a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    164e:	83 ff       	sbrs	r24, 3
    1650:	1e c0       	rjmp	.+60     	; 0x168e <__vector_10+0x16a>
    1652:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1656:	87 7f       	andi	r24, 0xF7	; 247
    1658:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    165c:	82 e0       	ldi	r24, 0x02	; 2
    165e:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <USB_DeviceState>
    1662:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <USB_Device_ConfigurationNumber>
    1666:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    166a:	8e 7f       	andi	r24, 0xFE	; 254
    166c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1670:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1674:	8e 7f       	andi	r24, 0xFE	; 254
    1676:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    167a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    167e:	80 61       	ori	r24, 0x10	; 16
    1680:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1684:	42 e0       	ldi	r20, 0x02	; 2
    1686:	60 e0       	ldi	r22, 0x00	; 0
    1688:	80 e0       	ldi	r24, 0x00	; 0
    168a:	21 de       	rcall	.-958    	; 0x12ce <Endpoint_ConfigureEndpoint_Prv>
    168c:	59 d1       	rcall	.+690    	; 0x1940 <USB_Event_Stub>
    168e:	ff 91       	pop	r31
    1690:	ef 91       	pop	r30
    1692:	bf 91       	pop	r27
    1694:	af 91       	pop	r26
    1696:	9f 91       	pop	r25
    1698:	8f 91       	pop	r24
    169a:	7f 91       	pop	r23
    169c:	6f 91       	pop	r22
    169e:	5f 91       	pop	r21
    16a0:	4f 91       	pop	r20
    16a2:	3f 91       	pop	r19
    16a4:	2f 91       	pop	r18
    16a6:	0f 90       	pop	r0
    16a8:	0f be       	out	0x3f, r0	; 63
    16aa:	0f 90       	pop	r0
    16ac:	1f 90       	pop	r1
    16ae:	18 95       	reti

000016b0 <USB_Device_ProcessControlRequest>:
    16b0:	1f 93       	push	r17
    16b2:	cf 93       	push	r28
    16b4:	df 93       	push	r29
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
    16ba:	aa 97       	sbiw	r28, 0x2a	; 42
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	f8 94       	cli
    16c0:	de bf       	out	0x3e, r29	; 62
    16c2:	0f be       	out	0x3f, r0	; 63
    16c4:	cd bf       	out	0x3d, r28	; 61
    16c6:	ed e5       	ldi	r30, 0x5D	; 93
    16c8:	f3 e0       	ldi	r31, 0x03	; 3
    16ca:	88 e0       	ldi	r24, 0x08	; 8
    16cc:	8e 0f       	add	r24, r30
    16ce:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    16d2:	91 93       	st	Z+, r25
    16d4:	8e 13       	cpse	r24, r30
    16d6:	fb cf       	rjmp	.-10     	; 0x16ce <USB_Device_ProcessControlRequest+0x1e>
    16d8:	32 dc       	rcall	.-1948   	; 0xf3e <EVENT_USB_Device_ControlRequest>
    16da:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    16de:	83 ff       	sbrs	r24, 3
    16e0:	17 c1       	rjmp	.+558    	; 0x1910 <USB_Device_ProcessControlRequest+0x260>
    16e2:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <USB_ControlRequest>
    16e6:	90 91 5e 03 	lds	r25, 0x035E	; 0x80035e <USB_ControlRequest+0x1>
    16ea:	49 2f       	mov	r20, r25
    16ec:	50 e0       	ldi	r21, 0x00	; 0
    16ee:	4a 30       	cpi	r20, 0x0A	; 10
    16f0:	51 05       	cpc	r21, r1
    16f2:	08 f0       	brcs	.+2      	; 0x16f6 <USB_Device_ProcessControlRequest+0x46>
    16f4:	0d c1       	rjmp	.+538    	; 0x1910 <USB_Device_ProcessControlRequest+0x260>
    16f6:	fa 01       	movw	r30, r20
    16f8:	ea 5a       	subi	r30, 0xAA	; 170
    16fa:	ff 4f       	sbci	r31, 0xFF	; 255
    16fc:	45 c3       	rjmp	.+1674   	; 0x1d88 <__tablejump2__>
    16fe:	80 38       	cpi	r24, 0x80	; 128
    1700:	81 f0       	breq	.+32     	; 0x1722 <USB_Device_ProcessControlRequest+0x72>
    1702:	82 38       	cpi	r24, 0x82	; 130
    1704:	09 f0       	breq	.+2      	; 0x1708 <USB_Device_ProcessControlRequest+0x58>
    1706:	04 c1       	rjmp	.+520    	; 0x1910 <USB_Device_ProcessControlRequest+0x260>
    1708:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <USB_ControlRequest+0x4>
    170c:	8f 70       	andi	r24, 0x0F	; 15
    170e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1712:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1716:	85 fb       	bst	r24, 5
    1718:	88 27       	eor	r24, r24
    171a:	80 f9       	bld	r24, 0
    171c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1720:	06 c0       	rjmp	.+12     	; 0x172e <USB_Device_ProcessControlRequest+0x7e>
    1722:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <USB_Device_CurrentlySelfPowered>
    1726:	90 91 5a 03 	lds	r25, 0x035A	; 0x80035a <USB_Device_RemoteWakeupEnabled>
    172a:	91 11       	cpse	r25, r1
    172c:	82 60       	ori	r24, 0x02	; 2
    172e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1732:	97 7f       	andi	r25, 0xF7	; 247
    1734:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1738:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    173c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1740:	c4 c0       	rjmp	.+392    	; 0x18ca <USB_Device_ProcessControlRequest+0x21a>
    1742:	28 2f       	mov	r18, r24
    1744:	2d 7f       	andi	r18, 0xFD	; 253
    1746:	09 f0       	breq	.+2      	; 0x174a <USB_Device_ProcessControlRequest+0x9a>
    1748:	e3 c0       	rjmp	.+454    	; 0x1910 <USB_Device_ProcessControlRequest+0x260>
    174a:	88 23       	and	r24, r24
    174c:	19 f0       	breq	.+6      	; 0x1754 <USB_Device_ProcessControlRequest+0xa4>
    174e:	82 30       	cpi	r24, 0x02	; 2
    1750:	61 f0       	breq	.+24     	; 0x176a <USB_Device_ProcessControlRequest+0xba>
    1752:	de c0       	rjmp	.+444    	; 0x1910 <USB_Device_ProcessControlRequest+0x260>
    1754:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <USB_ControlRequest+0x2>
    1758:	81 30       	cpi	r24, 0x01	; 1
    175a:	09 f0       	breq	.+2      	; 0x175e <USB_Device_ProcessControlRequest+0xae>
    175c:	d9 c0       	rjmp	.+434    	; 0x1910 <USB_Device_ProcessControlRequest+0x260>
    175e:	93 30       	cpi	r25, 0x03	; 3
    1760:	09 f0       	breq	.+2      	; 0x1764 <USB_Device_ProcessControlRequest+0xb4>
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <USB_Device_RemoteWakeupEnabled>
    1768:	2b c0       	rjmp	.+86     	; 0x17c0 <USB_Device_ProcessControlRequest+0x110>
    176a:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <USB_ControlRequest+0x2>
    176e:	81 11       	cpse	r24, r1
    1770:	27 c0       	rjmp	.+78     	; 0x17c0 <USB_Device_ProcessControlRequest+0x110>
    1772:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <USB_ControlRequest+0x4>
    1776:	8f 70       	andi	r24, 0x0F	; 15
    1778:	09 f4       	brne	.+2      	; 0x177c <USB_Device_ProcessControlRequest+0xcc>
    177a:	ca c0       	rjmp	.+404    	; 0x1910 <USB_Device_ProcessControlRequest+0x260>
    177c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1780:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1784:	20 ff       	sbrs	r18, 0
    1786:	1c c0       	rjmp	.+56     	; 0x17c0 <USB_Device_ProcessControlRequest+0x110>
    1788:	93 30       	cpi	r25, 0x03	; 3
    178a:	21 f4       	brne	.+8      	; 0x1794 <USB_Device_ProcessControlRequest+0xe4>
    178c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1790:	80 62       	ori	r24, 0x20	; 32
    1792:	14 c0       	rjmp	.+40     	; 0x17bc <USB_Device_ProcessControlRequest+0x10c>
    1794:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1798:	90 61       	ori	r25, 0x10	; 16
    179a:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    179e:	21 e0       	ldi	r18, 0x01	; 1
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	a9 01       	movw	r20, r18
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <USB_Device_ProcessControlRequest+0xfa>
    17a6:	44 0f       	add	r20, r20
    17a8:	55 1f       	adc	r21, r21
    17aa:	8a 95       	dec	r24
    17ac:	e2 f7       	brpl	.-8      	; 0x17a6 <USB_Device_ProcessControlRequest+0xf6>
    17ae:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    17b2:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    17b6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    17ba:	88 60       	ori	r24, 0x08	; 8
    17bc:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    17c0:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    17c4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17c8:	87 7f       	andi	r24, 0xF7	; 247
    17ca:	82 c0       	rjmp	.+260    	; 0x18d0 <USB_Device_ProcessControlRequest+0x220>
    17cc:	81 11       	cpse	r24, r1
    17ce:	a0 c0       	rjmp	.+320    	; 0x1910 <USB_Device_ProcessControlRequest+0x260>
    17d0:	10 91 5f 03 	lds	r17, 0x035F	; 0x80035f <USB_ControlRequest+0x2>
    17d4:	1f 77       	andi	r17, 0x7F	; 127
    17d6:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    17da:	80 78       	andi	r24, 0x80	; 128
    17dc:	81 2b       	or	r24, r17
    17de:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    17e2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17e6:	87 7f       	andi	r24, 0xF7	; 247
    17e8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17ec:	ed dd       	rcall	.-1062   	; 0x13c8 <Endpoint_ClearStatusStage>
    17ee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17f2:	80 ff       	sbrs	r24, 0
    17f4:	fc cf       	rjmp	.-8      	; 0x17ee <USB_Device_ProcessControlRequest+0x13e>
    17f6:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    17fa:	80 68       	ori	r24, 0x80	; 128
    17fc:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1800:	11 11       	cpse	r17, r1
    1802:	02 c0       	rjmp	.+4      	; 0x1808 <USB_Device_ProcessControlRequest+0x158>
    1804:	82 e0       	ldi	r24, 0x02	; 2
    1806:	01 c0       	rjmp	.+2      	; 0x180a <USB_Device_ProcessControlRequest+0x15a>
    1808:	83 e0       	ldi	r24, 0x03	; 3
    180a:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <USB_DeviceState>
    180e:	80 c0       	rjmp	.+256    	; 0x1910 <USB_Device_ProcessControlRequest+0x260>
    1810:	80 58       	subi	r24, 0x80	; 128
    1812:	82 30       	cpi	r24, 0x02	; 2
    1814:	08 f0       	brcs	.+2      	; 0x1818 <USB_Device_ProcessControlRequest+0x168>
    1816:	7c c0       	rjmp	.+248    	; 0x1910 <USB_Device_ProcessControlRequest+0x260>
    1818:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <USB_ControlRequest+0x2>
    181c:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <USB_ControlRequest+0x3>
    1820:	8c 3d       	cpi	r24, 0xDC	; 220
    1822:	53 e0       	ldi	r21, 0x03	; 3
    1824:	95 07       	cpc	r25, r21
    1826:	71 f5       	brne	.+92     	; 0x1884 <USB_Device_ProcessControlRequest+0x1d4>
    1828:	83 e0       	ldi	r24, 0x03	; 3
    182a:	8a 83       	std	Y+2, r24	; 0x02
    182c:	8a e2       	ldi	r24, 0x2A	; 42
    182e:	89 83       	std	Y+1, r24	; 0x01
    1830:	4f b7       	in	r20, 0x3f	; 63
    1832:	f8 94       	cli
    1834:	de 01       	movw	r26, r28
    1836:	13 96       	adiw	r26, 0x03	; 3
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	3e e0       	ldi	r19, 0x0E	; 14
    183c:	51 e2       	ldi	r21, 0x21	; 33
    183e:	e3 2f       	mov	r30, r19
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    1846:	e4 91       	lpm	r30, Z
    1848:	20 ff       	sbrs	r18, 0
    184a:	03 c0       	rjmp	.+6      	; 0x1852 <USB_Device_ProcessControlRequest+0x1a2>
    184c:	e2 95       	swap	r30
    184e:	ef 70       	andi	r30, 0x0F	; 15
    1850:	3f 5f       	subi	r19, 0xFF	; 255
    1852:	ef 70       	andi	r30, 0x0F	; 15
    1854:	8e 2f       	mov	r24, r30
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	ea 30       	cpi	r30, 0x0A	; 10
    185a:	10 f0       	brcs	.+4      	; 0x1860 <USB_Device_ProcessControlRequest+0x1b0>
    185c:	c7 96       	adiw	r24, 0x37	; 55
    185e:	01 c0       	rjmp	.+2      	; 0x1862 <USB_Device_ProcessControlRequest+0x1b2>
    1860:	c0 96       	adiw	r24, 0x30	; 48
    1862:	8d 93       	st	X+, r24
    1864:	9d 93       	st	X+, r25
    1866:	2f 5f       	subi	r18, 0xFF	; 255
    1868:	24 31       	cpi	r18, 0x14	; 20
    186a:	49 f7       	brne	.-46     	; 0x183e <USB_Device_ProcessControlRequest+0x18e>
    186c:	4f bf       	out	0x3f, r20	; 63
    186e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1872:	87 7f       	andi	r24, 0xF7	; 247
    1874:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1878:	6a e2       	ldi	r22, 0x2A	; 42
    187a:	70 e0       	ldi	r23, 0x00	; 0
    187c:	ce 01       	movw	r24, r28
    187e:	01 96       	adiw	r24, 0x01	; 1
    1880:	2a dc       	rcall	.-1964   	; 0x10d6 <Endpoint_Write_Control_Stream_LE>
    1882:	12 c0       	rjmp	.+36     	; 0x18a8 <USB_Device_ProcessControlRequest+0x1f8>
    1884:	ae 01       	movw	r20, r28
    1886:	4f 5f       	subi	r20, 0xFF	; 255
    1888:	5f 4f       	sbci	r21, 0xFF	; 255
    188a:	60 91 61 03 	lds	r22, 0x0361	; 0x800361 <USB_ControlRequest+0x4>
    188e:	96 db       	rcall	.-2260   	; 0xfbc <CALLBACK_USB_GetDescriptor>
    1890:	bc 01       	movw	r22, r24
    1892:	89 2b       	or	r24, r25
    1894:	09 f4       	brne	.+2      	; 0x1898 <USB_Device_ProcessControlRequest+0x1e8>
    1896:	3c c0       	rjmp	.+120    	; 0x1910 <USB_Device_ProcessControlRequest+0x260>
    1898:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    189c:	97 7f       	andi	r25, 0xF7	; 247
    189e:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	9a 81       	ldd	r25, Y+2	; 0x02
    18a6:	b6 dc       	rcall	.-1684   	; 0x1214 <Endpoint_Write_Control_PStream_LE>
    18a8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18ac:	8b 77       	andi	r24, 0x7B	; 123
    18ae:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18b2:	2e c0       	rjmp	.+92     	; 0x1910 <USB_Device_ProcessControlRequest+0x260>
    18b4:	80 38       	cpi	r24, 0x80	; 128
    18b6:	61 f5       	brne	.+88     	; 0x1910 <USB_Device_ProcessControlRequest+0x260>
    18b8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18bc:	87 7f       	andi	r24, 0xF7	; 247
    18be:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18c2:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <USB_Device_ConfigurationNumber>
    18c6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    18ca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18ce:	8e 77       	andi	r24, 0x7E	; 126
    18d0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18d4:	79 dd       	rcall	.-1294   	; 0x13c8 <Endpoint_ClearStatusStage>
    18d6:	1c c0       	rjmp	.+56     	; 0x1910 <USB_Device_ProcessControlRequest+0x260>
    18d8:	81 11       	cpse	r24, r1
    18da:	1a c0       	rjmp	.+52     	; 0x1910 <USB_Device_ProcessControlRequest+0x260>
    18dc:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <USB_ControlRequest+0x2>
    18e0:	92 30       	cpi	r25, 0x02	; 2
    18e2:	b0 f4       	brcc	.+44     	; 0x1910 <USB_Device_ProcessControlRequest+0x260>
    18e4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18e8:	87 7f       	andi	r24, 0xF7	; 247
    18ea:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18ee:	90 93 58 03 	sts	0x0358, r25	; 0x800358 <USB_Device_ConfigurationNumber>
    18f2:	6a dd       	rcall	.-1324   	; 0x13c8 <Endpoint_ClearStatusStage>
    18f4:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <USB_Device_ConfigurationNumber>
    18f8:	81 11       	cpse	r24, r1
    18fa:	06 c0       	rjmp	.+12     	; 0x1908 <USB_Device_ProcessControlRequest+0x258>
    18fc:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1900:	87 fd       	sbrc	r24, 7
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <USB_Device_ProcessControlRequest+0x258>
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	01 c0       	rjmp	.+2      	; 0x190a <USB_Device_ProcessControlRequest+0x25a>
    1908:	84 e0       	ldi	r24, 0x04	; 4
    190a:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <USB_DeviceState>
    190e:	0e db       	rcall	.-2532   	; 0xf2c <EVENT_USB_Device_ConfigurationChanged>
    1910:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1914:	83 ff       	sbrs	r24, 3
    1916:	0a c0       	rjmp	.+20     	; 0x192c <USB_Device_ProcessControlRequest+0x27c>
    1918:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    191c:	87 7f       	andi	r24, 0xF7	; 247
    191e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1922:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1926:	80 62       	ori	r24, 0x20	; 32
    1928:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    192c:	aa 96       	adiw	r28, 0x2a	; 42
    192e:	0f b6       	in	r0, 0x3f	; 63
    1930:	f8 94       	cli
    1932:	de bf       	out	0x3e, r29	; 62
    1934:	0f be       	out	0x3f, r0	; 63
    1936:	cd bf       	out	0x3d, r28	; 61
    1938:	df 91       	pop	r29
    193a:	cf 91       	pop	r28
    193c:	1f 91       	pop	r17
    193e:	08 95       	ret

00001940 <USB_Event_Stub>:
    1940:	08 95       	ret

00001942 <USB_USBTask>:
    1942:	cf 93       	push	r28
    1944:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <USB_DeviceState>
    1948:	88 23       	and	r24, r24
    194a:	99 f0       	breq	.+38     	; 0x1972 <USB_USBTask+0x30>
    194c:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1950:	cf 70       	andi	r28, 0x0F	; 15
    1952:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1956:	89 2f       	mov	r24, r25
    1958:	81 70       	andi	r24, 0x01	; 1
    195a:	90 fd       	sbrc	r25, 0
    195c:	80 e8       	ldi	r24, 0x80	; 128
    195e:	c8 2b       	or	r28, r24
    1960:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1964:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1968:	83 fd       	sbrc	r24, 3
    196a:	a2 de       	rcall	.-700    	; 0x16b0 <USB_Device_ProcessControlRequest>
    196c:	cf 70       	andi	r28, 0x0F	; 15
    196e:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1972:	cf 91       	pop	r28
    1974:	08 95       	ret

00001976 <HID_Device_ProcessControlRequest>:
    1976:	6f 92       	push	r6
    1978:	7f 92       	push	r7
    197a:	8f 92       	push	r8
    197c:	9f 92       	push	r9
    197e:	af 92       	push	r10
    1980:	bf 92       	push	r11
    1982:	cf 92       	push	r12
    1984:	df 92       	push	r13
    1986:	ef 92       	push	r14
    1988:	ff 92       	push	r15
    198a:	0f 93       	push	r16
    198c:	1f 93       	push	r17
    198e:	cf 93       	push	r28
    1990:	df 93       	push	r29
    1992:	00 d0       	rcall	.+0      	; 0x1994 <HID_Device_ProcessControlRequest+0x1e>
    1994:	1f 92       	push	r1
    1996:	cd b7       	in	r28, 0x3d	; 61
    1998:	de b7       	in	r29, 0x3e	; 62
    199a:	7c 01       	movw	r14, r24
    199c:	cd b6       	in	r12, 0x3d	; 61
    199e:	de b6       	in	r13, 0x3e	; 62
    19a0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    19a4:	83 ff       	sbrs	r24, 3
    19a6:	04 c1       	rjmp	.+520    	; 0x1bb0 <HID_Device_ProcessControlRequest+0x23a>
    19a8:	f7 01       	movw	r30, r14
    19aa:	80 81       	ld	r24, Z
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	20 91 61 03 	lds	r18, 0x0361	; 0x800361 <USB_ControlRequest+0x4>
    19b2:	30 91 62 03 	lds	r19, 0x0362	; 0x800362 <USB_ControlRequest+0x5>
    19b6:	28 17       	cp	r18, r24
    19b8:	39 07       	cpc	r19, r25
    19ba:	09 f0       	breq	.+2      	; 0x19be <HID_Device_ProcessControlRequest+0x48>
    19bc:	f9 c0       	rjmp	.+498    	; 0x1bb0 <HID_Device_ProcessControlRequest+0x23a>
    19be:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <USB_ControlRequest+0x1>
    19c2:	83 30       	cpi	r24, 0x03	; 3
    19c4:	09 f4       	brne	.+2      	; 0x19c8 <HID_Device_ProcessControlRequest+0x52>
    19c6:	9b c0       	rjmp	.+310    	; 0x1afe <HID_Device_ProcessControlRequest+0x188>
    19c8:	30 f4       	brcc	.+12     	; 0x19d6 <HID_Device_ProcessControlRequest+0x60>
    19ca:	81 30       	cpi	r24, 0x01	; 1
    19cc:	71 f0       	breq	.+28     	; 0x19ea <HID_Device_ProcessControlRequest+0x74>
    19ce:	82 30       	cpi	r24, 0x02	; 2
    19d0:	09 f4       	brne	.+2      	; 0x19d4 <HID_Device_ProcessControlRequest+0x5e>
    19d2:	d2 c0       	rjmp	.+420    	; 0x1b78 <HID_Device_ProcessControlRequest+0x202>
    19d4:	ed c0       	rjmp	.+474    	; 0x1bb0 <HID_Device_ProcessControlRequest+0x23a>
    19d6:	8a 30       	cpi	r24, 0x0A	; 10
    19d8:	09 f4       	brne	.+2      	; 0x19dc <HID_Device_ProcessControlRequest+0x66>
    19da:	b6 c0       	rjmp	.+364    	; 0x1b48 <HID_Device_ProcessControlRequest+0x1d2>
    19dc:	8b 30       	cpi	r24, 0x0B	; 11
    19de:	09 f4       	brne	.+2      	; 0x19e2 <HID_Device_ProcessControlRequest+0x6c>
    19e0:	9f c0       	rjmp	.+318    	; 0x1b20 <HID_Device_ProcessControlRequest+0x1aa>
    19e2:	89 30       	cpi	r24, 0x09	; 9
    19e4:	09 f0       	breq	.+2      	; 0x19e8 <HID_Device_ProcessControlRequest+0x72>
    19e6:	e4 c0       	rjmp	.+456    	; 0x1bb0 <HID_Device_ProcessControlRequest+0x23a>
    19e8:	4d c0       	rjmp	.+154    	; 0x1a84 <HID_Device_ProcessControlRequest+0x10e>
    19ea:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <USB_ControlRequest>
    19ee:	81 3a       	cpi	r24, 0xA1	; 161
    19f0:	09 f0       	breq	.+2      	; 0x19f4 <HID_Device_ProcessControlRequest+0x7e>
    19f2:	de c0       	rjmp	.+444    	; 0x1bb0 <HID_Device_ProcessControlRequest+0x23a>
    19f4:	8d b6       	in	r8, 0x3d	; 61
    19f6:	9e b6       	in	r9, 0x3e	; 62
    19f8:	1a 82       	std	Y+2, r1	; 0x02
    19fa:	19 82       	std	Y+1, r1	; 0x01
    19fc:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <USB_ControlRequest+0x2>
    1a00:	10 91 60 03 	lds	r17, 0x0360	; 0x800360 <USB_ControlRequest+0x3>
    1a04:	8b 83       	std	Y+3, r24	; 0x03
    1a06:	f7 01       	movw	r30, r14
    1a08:	80 85       	ldd	r24, Z+8	; 0x08
    1a0a:	48 2f       	mov	r20, r24
    1a0c:	50 e0       	ldi	r21, 0x00	; 0
    1a0e:	8d b7       	in	r24, 0x3d	; 61
    1a10:	9e b7       	in	r25, 0x3e	; 62
    1a12:	84 1b       	sub	r24, r20
    1a14:	95 0b       	sbc	r25, r21
    1a16:	0f b6       	in	r0, 0x3f	; 63
    1a18:	f8 94       	cli
    1a1a:	9e bf       	out	0x3e, r25	; 62
    1a1c:	0f be       	out	0x3f, r0	; 63
    1a1e:	8d bf       	out	0x3d, r24	; 61
    1a20:	ed b7       	in	r30, 0x3d	; 61
    1a22:	fe b7       	in	r31, 0x3e	; 62
    1a24:	31 96       	adiw	r30, 0x01	; 1
    1a26:	5f 01       	movw	r10, r30
    1a28:	60 e0       	ldi	r22, 0x00	; 0
    1a2a:	70 e0       	ldi	r23, 0x00	; 0
    1a2c:	cf 01       	movw	r24, r30
    1a2e:	c8 d1       	rcall	.+912    	; 0x1dc0 <memset>
    1a30:	4f ef       	ldi	r20, 0xFF	; 255
    1a32:	41 0f       	add	r20, r17
    1a34:	8e 01       	movw	r16, r28
    1a36:	0f 5f       	subi	r16, 0xFF	; 255
    1a38:	1f 4f       	sbci	r17, 0xFF	; 255
    1a3a:	95 01       	movw	r18, r10
    1a3c:	be 01       	movw	r22, r28
    1a3e:	6d 5f       	subi	r22, 0xFD	; 253
    1a40:	7f 4f       	sbci	r23, 0xFF	; 255
    1a42:	c7 01       	movw	r24, r14
    1a44:	8b da       	rcall	.-2794   	; 0xf5c <CALLBACK_HID_Device_CreateHIDReport>
    1a46:	f7 01       	movw	r30, r14
    1a48:	86 81       	ldd	r24, Z+6	; 0x06
    1a4a:	97 81       	ldd	r25, Z+7	; 0x07
    1a4c:	00 97       	sbiw	r24, 0x00	; 0
    1a4e:	21 f0       	breq	.+8      	; 0x1a58 <HID_Device_ProcessControlRequest+0xe2>
    1a50:	40 85       	ldd	r20, Z+8	; 0x08
    1a52:	50 e0       	ldi	r21, 0x00	; 0
    1a54:	b5 01       	movw	r22, r10
    1a56:	ab d1       	rcall	.+854    	; 0x1dae <memcpy>
    1a58:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1a5c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a60:	87 7f       	andi	r24, 0xF7	; 247
    1a62:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a66:	69 81       	ldd	r22, Y+1	; 0x01
    1a68:	7a 81       	ldd	r23, Y+2	; 0x02
    1a6a:	c5 01       	movw	r24, r10
    1a6c:	34 db       	rcall	.-2456   	; 0x10d6 <Endpoint_Write_Control_Stream_LE>
    1a6e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a72:	8b 77       	andi	r24, 0x7B	; 123
    1a74:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a78:	0f b6       	in	r0, 0x3f	; 63
    1a7a:	f8 94       	cli
    1a7c:	9e be       	out	0x3e, r9	; 62
    1a7e:	0f be       	out	0x3f, r0	; 63
    1a80:	8d be       	out	0x3d, r8	; 61
    1a82:	96 c0       	rjmp	.+300    	; 0x1bb0 <HID_Device_ProcessControlRequest+0x23a>
    1a84:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <USB_ControlRequest>
    1a88:	81 32       	cpi	r24, 0x21	; 33
    1a8a:	09 f0       	breq	.+2      	; 0x1a8e <HID_Device_ProcessControlRequest+0x118>
    1a8c:	91 c0       	rjmp	.+290    	; 0x1bb0 <HID_Device_ProcessControlRequest+0x23a>
    1a8e:	ad b6       	in	r10, 0x3d	; 61
    1a90:	be b6       	in	r11, 0x3e	; 62
    1a92:	00 91 63 03 	lds	r16, 0x0363	; 0x800363 <USB_ControlRequest+0x6>
    1a96:	10 91 64 03 	lds	r17, 0x0364	; 0x800364 <USB_ControlRequest+0x7>
    1a9a:	70 90 5f 03 	lds	r7, 0x035F	; 0x80035f <USB_ControlRequest+0x2>
    1a9e:	60 90 60 03 	lds	r6, 0x0360	; 0x800360 <USB_ControlRequest+0x3>
    1aa2:	8d b7       	in	r24, 0x3d	; 61
    1aa4:	9e b7       	in	r25, 0x3e	; 62
    1aa6:	80 1b       	sub	r24, r16
    1aa8:	91 0b       	sbc	r25, r17
    1aaa:	0f b6       	in	r0, 0x3f	; 63
    1aac:	f8 94       	cli
    1aae:	9e bf       	out	0x3e, r25	; 62
    1ab0:	0f be       	out	0x3f, r0	; 63
    1ab2:	8d bf       	out	0x3d, r24	; 61
    1ab4:	ed b7       	in	r30, 0x3d	; 61
    1ab6:	fe b7       	in	r31, 0x3e	; 62
    1ab8:	31 96       	adiw	r30, 0x01	; 1
    1aba:	4f 01       	movw	r8, r30
    1abc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ac0:	87 7f       	andi	r24, 0xF7	; 247
    1ac2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ac6:	b8 01       	movw	r22, r16
    1ac8:	cf 01       	movw	r24, r30
    1aca:	64 db       	rcall	.-2360   	; 0x1194 <Endpoint_Read_Control_Stream_LE>
    1acc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ad0:	8e 77       	andi	r24, 0x7E	; 126
    1ad2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ad6:	21 e0       	ldi	r18, 0x01	; 1
    1ad8:	71 10       	cpse	r7, r1
    1ada:	01 c0       	rjmp	.+2      	; 0x1ade <HID_Device_ProcessControlRequest+0x168>
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	02 1b       	sub	r16, r18
    1ae2:	13 0b       	sbc	r17, r19
    1ae4:	28 0d       	add	r18, r8
    1ae6:	39 1d       	adc	r19, r9
    1ae8:	4f ef       	ldi	r20, 0xFF	; 255
    1aea:	46 0d       	add	r20, r6
    1aec:	67 2d       	mov	r22, r7
    1aee:	c7 01       	movw	r24, r14
    1af0:	50 da       	rcall	.-2912   	; 0xf92 <CALLBACK_HID_Device_ProcessHIDReport>
    1af2:	0f b6       	in	r0, 0x3f	; 63
    1af4:	f8 94       	cli
    1af6:	be be       	out	0x3e, r11	; 62
    1af8:	0f be       	out	0x3f, r0	; 63
    1afa:	ad be       	out	0x3d, r10	; 61
    1afc:	59 c0       	rjmp	.+178    	; 0x1bb0 <HID_Device_ProcessControlRequest+0x23a>
    1afe:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <USB_ControlRequest>
    1b02:	81 3a       	cpi	r24, 0xA1	; 161
    1b04:	09 f0       	breq	.+2      	; 0x1b08 <HID_Device_ProcessControlRequest+0x192>
    1b06:	54 c0       	rjmp	.+168    	; 0x1bb0 <HID_Device_ProcessControlRequest+0x23a>
    1b08:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b0c:	87 7f       	andi	r24, 0xF7	; 247
    1b0e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b12:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b16:	80 ff       	sbrs	r24, 0
    1b18:	fc cf       	rjmp	.-8      	; 0x1b12 <HID_Device_ProcessControlRequest+0x19c>
    1b1a:	f7 01       	movw	r30, r14
    1b1c:	81 85       	ldd	r24, Z+9	; 0x09
    1b1e:	40 c0       	rjmp	.+128    	; 0x1ba0 <HID_Device_ProcessControlRequest+0x22a>
    1b20:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <USB_ControlRequest>
    1b24:	81 32       	cpi	r24, 0x21	; 33
    1b26:	09 f0       	breq	.+2      	; 0x1b2a <HID_Device_ProcessControlRequest+0x1b4>
    1b28:	43 c0       	rjmp	.+134    	; 0x1bb0 <HID_Device_ProcessControlRequest+0x23a>
    1b2a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b2e:	87 7f       	andi	r24, 0xF7	; 247
    1b30:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b34:	49 dc       	rcall	.-1902   	; 0x13c8 <Endpoint_ClearStatusStage>
    1b36:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <USB_ControlRequest+0x2>
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	91 11       	cpse	r25, r1
    1b3e:	01 c0       	rjmp	.+2      	; 0x1b42 <HID_Device_ProcessControlRequest+0x1cc>
    1b40:	80 e0       	ldi	r24, 0x00	; 0
    1b42:	f7 01       	movw	r30, r14
    1b44:	81 87       	std	Z+9, r24	; 0x09
    1b46:	34 c0       	rjmp	.+104    	; 0x1bb0 <HID_Device_ProcessControlRequest+0x23a>
    1b48:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <USB_ControlRequest>
    1b4c:	81 32       	cpi	r24, 0x21	; 33
    1b4e:	81 f5       	brne	.+96     	; 0x1bb0 <HID_Device_ProcessControlRequest+0x23a>
    1b50:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b54:	87 7f       	andi	r24, 0xF7	; 247
    1b56:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b5a:	36 dc       	rcall	.-1940   	; 0x13c8 <Endpoint_ClearStatusStage>
    1b5c:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <USB_ControlRequest+0x2>
    1b60:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <USB_ControlRequest+0x3>
    1b64:	88 27       	eor	r24, r24
    1b66:	36 e0       	ldi	r19, 0x06	; 6
    1b68:	96 95       	lsr	r25
    1b6a:	87 95       	ror	r24
    1b6c:	3a 95       	dec	r19
    1b6e:	e1 f7       	brne	.-8      	; 0x1b68 <HID_Device_ProcessControlRequest+0x1f2>
    1b70:	f7 01       	movw	r30, r14
    1b72:	95 87       	std	Z+13, r25	; 0x0d
    1b74:	84 87       	std	Z+12, r24	; 0x0c
    1b76:	1c c0       	rjmp	.+56     	; 0x1bb0 <HID_Device_ProcessControlRequest+0x23a>
    1b78:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <USB_ControlRequest>
    1b7c:	81 3a       	cpi	r24, 0xA1	; 161
    1b7e:	c1 f4       	brne	.+48     	; 0x1bb0 <HID_Device_ProcessControlRequest+0x23a>
    1b80:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b84:	87 7f       	andi	r24, 0xF7	; 247
    1b86:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b8a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b8e:	80 ff       	sbrs	r24, 0
    1b90:	fc cf       	rjmp	.-8      	; 0x1b8a <HID_Device_ProcessControlRequest+0x214>
    1b92:	f7 01       	movw	r30, r14
    1b94:	84 85       	ldd	r24, Z+12	; 0x0c
    1b96:	95 85       	ldd	r25, Z+13	; 0x0d
    1b98:	96 95       	lsr	r25
    1b9a:	87 95       	ror	r24
    1b9c:	96 95       	lsr	r25
    1b9e:	87 95       	ror	r24
    1ba0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1ba4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ba8:	8e 77       	andi	r24, 0x7E	; 126
    1baa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1bae:	0c dc       	rcall	.-2024   	; 0x13c8 <Endpoint_ClearStatusStage>
    1bb0:	0f b6       	in	r0, 0x3f	; 63
    1bb2:	f8 94       	cli
    1bb4:	de be       	out	0x3e, r13	; 62
    1bb6:	0f be       	out	0x3f, r0	; 63
    1bb8:	cd be       	out	0x3d, r12	; 61
    1bba:	0f 90       	pop	r0
    1bbc:	0f 90       	pop	r0
    1bbe:	0f 90       	pop	r0
    1bc0:	df 91       	pop	r29
    1bc2:	cf 91       	pop	r28
    1bc4:	1f 91       	pop	r17
    1bc6:	0f 91       	pop	r16
    1bc8:	ff 90       	pop	r15
    1bca:	ef 90       	pop	r14
    1bcc:	df 90       	pop	r13
    1bce:	cf 90       	pop	r12
    1bd0:	bf 90       	pop	r11
    1bd2:	af 90       	pop	r10
    1bd4:	9f 90       	pop	r9
    1bd6:	8f 90       	pop	r8
    1bd8:	7f 90       	pop	r7
    1bda:	6f 90       	pop	r6
    1bdc:	08 95       	ret

00001bde <HID_Device_ConfigureEndpoints>:
    1bde:	fc 01       	movw	r30, r24
    1be0:	39 96       	adiw	r30, 0x09	; 9
    1be2:	27 e0       	ldi	r18, 0x07	; 7
    1be4:	df 01       	movw	r26, r30
    1be6:	1d 92       	st	X+, r1
    1be8:	2a 95       	dec	r18
    1bea:	e9 f7       	brne	.-6      	; 0x1be6 <HID_Device_ConfigureEndpoints+0x8>
    1bec:	21 e0       	ldi	r18, 0x01	; 1
    1bee:	fc 01       	movw	r30, r24
    1bf0:	21 87       	std	Z+9, r18	; 0x09
    1bf2:	24 ef       	ldi	r18, 0xF4	; 244
    1bf4:	31 e0       	ldi	r19, 0x01	; 1
    1bf6:	35 87       	std	Z+13, r19	; 0x0d
    1bf8:	24 87       	std	Z+12, r18	; 0x0c
    1bfa:	23 e0       	ldi	r18, 0x03	; 3
    1bfc:	24 83       	std	Z+4, r18	; 0x04
    1bfe:	61 e0       	ldi	r22, 0x01	; 1
    1c00:	01 96       	adiw	r24, 0x01	; 1
    1c02:	9a cb       	rjmp	.-2252   	; 0x1338 <Endpoint_ConfigureEndpointTable>

00001c04 <HID_Device_USBTask>:
    1c04:	4f 92       	push	r4
    1c06:	5f 92       	push	r5
    1c08:	6f 92       	push	r6
    1c0a:	7f 92       	push	r7
    1c0c:	8f 92       	push	r8
    1c0e:	9f 92       	push	r9
    1c10:	af 92       	push	r10
    1c12:	bf 92       	push	r11
    1c14:	cf 92       	push	r12
    1c16:	df 92       	push	r13
    1c18:	ef 92       	push	r14
    1c1a:	ff 92       	push	r15
    1c1c:	0f 93       	push	r16
    1c1e:	1f 93       	push	r17
    1c20:	cf 93       	push	r28
    1c22:	df 93       	push	r29
    1c24:	00 d0       	rcall	.+0      	; 0x1c26 <HID_Device_USBTask+0x22>
    1c26:	1f 92       	push	r1
    1c28:	cd b7       	in	r28, 0x3d	; 61
    1c2a:	de b7       	in	r29, 0x3e	; 62
    1c2c:	7c 01       	movw	r14, r24
    1c2e:	ad b6       	in	r10, 0x3d	; 61
    1c30:	be b6       	in	r11, 0x3e	; 62
    1c32:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <USB_DeviceState>
    1c36:	84 30       	cpi	r24, 0x04	; 4
    1c38:	09 f0       	breq	.+2      	; 0x1c3c <HID_Device_USBTask+0x38>
    1c3a:	8d c0       	rjmp	.+282    	; 0x1d56 <HID_Device_USBTask+0x152>
    1c3c:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1c40:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    1c44:	f7 01       	movw	r30, r14
    1c46:	22 85       	ldd	r18, Z+10	; 0x0a
    1c48:	33 85       	ldd	r19, Z+11	; 0x0b
    1c4a:	28 17       	cp	r18, r24
    1c4c:	39 07       	cpc	r19, r25
    1c4e:	09 f4       	brne	.+2      	; 0x1c52 <HID_Device_USBTask+0x4e>
    1c50:	82 c0       	rjmp	.+260    	; 0x1d56 <HID_Device_USBTask+0x152>
    1c52:	81 81       	ldd	r24, Z+1	; 0x01
    1c54:	8f 70       	andi	r24, 0x0F	; 15
    1c56:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1c5a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1c5e:	85 ff       	sbrs	r24, 5
    1c60:	7a c0       	rjmp	.+244    	; 0x1d56 <HID_Device_USBTask+0x152>
    1c62:	8d b6       	in	r8, 0x3d	; 61
    1c64:	9e b6       	in	r9, 0x3e	; 62
    1c66:	40 85       	ldd	r20, Z+8	; 0x08
    1c68:	50 e0       	ldi	r21, 0x00	; 0
    1c6a:	8d b7       	in	r24, 0x3d	; 61
    1c6c:	9e b7       	in	r25, 0x3e	; 62
    1c6e:	84 1b       	sub	r24, r20
    1c70:	95 0b       	sbc	r25, r21
    1c72:	0f b6       	in	r0, 0x3f	; 63
    1c74:	f8 94       	cli
    1c76:	9e bf       	out	0x3e, r25	; 62
    1c78:	0f be       	out	0x3f, r0	; 63
    1c7a:	8d bf       	out	0x3d, r24	; 61
    1c7c:	ed b7       	in	r30, 0x3d	; 61
    1c7e:	fe b7       	in	r31, 0x3e	; 62
    1c80:	31 96       	adiw	r30, 0x01	; 1
    1c82:	6f 01       	movw	r12, r30
    1c84:	1b 82       	std	Y+3, r1	; 0x03
    1c86:	1a 82       	std	Y+2, r1	; 0x02
    1c88:	19 82       	std	Y+1, r1	; 0x01
    1c8a:	60 e0       	ldi	r22, 0x00	; 0
    1c8c:	70 e0       	ldi	r23, 0x00	; 0
    1c8e:	cf 01       	movw	r24, r30
    1c90:	97 d0       	rcall	.+302    	; 0x1dc0 <memset>
    1c92:	8e 01       	movw	r16, r28
    1c94:	0f 5f       	subi	r16, 0xFF	; 255
    1c96:	1f 4f       	sbci	r17, 0xFF	; 255
    1c98:	96 01       	movw	r18, r12
    1c9a:	40 e0       	ldi	r20, 0x00	; 0
    1c9c:	be 01       	movw	r22, r28
    1c9e:	6d 5f       	subi	r22, 0xFD	; 253
    1ca0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca2:	c7 01       	movw	r24, r14
    1ca4:	5b d9       	rcall	.-3402   	; 0xf5c <CALLBACK_HID_Device_CreateHIDReport>
    1ca6:	48 2e       	mov	r4, r24
    1ca8:	f7 01       	movw	r30, r14
    1caa:	84 85       	ldd	r24, Z+12	; 0x0c
    1cac:	95 85       	ldd	r25, Z+13	; 0x0d
    1cae:	89 2b       	or	r24, r25
    1cb0:	51 f0       	breq	.+20     	; 0x1cc6 <HID_Device_USBTask+0xc2>
    1cb2:	91 e0       	ldi	r25, 0x01	; 1
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	26 85       	ldd	r18, Z+14	; 0x0e
    1cb8:	37 85       	ldd	r19, Z+15	; 0x0f
    1cba:	23 2b       	or	r18, r19
    1cbc:	09 f0       	breq	.+2      	; 0x1cc0 <HID_Device_USBTask+0xbc>
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	09 2f       	mov	r16, r25
    1cc2:	18 2f       	mov	r17, r24
    1cc4:	02 c0       	rjmp	.+4      	; 0x1cca <HID_Device_USBTask+0xc6>
    1cc6:	00 e0       	ldi	r16, 0x00	; 0
    1cc8:	10 e0       	ldi	r17, 0x00	; 0
    1cca:	f7 01       	movw	r30, r14
    1ccc:	66 80       	ldd	r6, Z+6	; 0x06
    1cce:	77 80       	ldd	r7, Z+7	; 0x07
    1cd0:	61 14       	cp	r6, r1
    1cd2:	71 04       	cpc	r7, r1
    1cd4:	89 f0       	breq	.+34     	; 0x1cf8 <HID_Device_USBTask+0xf4>
    1cd6:	49 81       	ldd	r20, Y+1	; 0x01
    1cd8:	5a 81       	ldd	r21, Y+2	; 0x02
    1cda:	b3 01       	movw	r22, r6
    1cdc:	c6 01       	movw	r24, r12
    1cde:	5a d0       	rcall	.+180    	; 0x1d94 <memcmp>
    1ce0:	55 24       	eor	r5, r5
    1ce2:	53 94       	inc	r5
    1ce4:	89 2b       	or	r24, r25
    1ce6:	09 f4       	brne	.+2      	; 0x1cea <HID_Device_USBTask+0xe6>
    1ce8:	51 2c       	mov	r5, r1
    1cea:	f7 01       	movw	r30, r14
    1cec:	40 85       	ldd	r20, Z+8	; 0x08
    1cee:	50 e0       	ldi	r21, 0x00	; 0
    1cf0:	b6 01       	movw	r22, r12
    1cf2:	c3 01       	movw	r24, r6
    1cf4:	5c d0       	rcall	.+184    	; 0x1dae <memcpy>
    1cf6:	01 c0       	rjmp	.+2      	; 0x1cfa <HID_Device_USBTask+0xf6>
    1cf8:	51 2c       	mov	r5, r1
    1cfa:	89 81       	ldd	r24, Y+1	; 0x01
    1cfc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cfe:	89 2b       	or	r24, r25
    1d00:	f1 f0       	breq	.+60     	; 0x1d3e <HID_Device_USBTask+0x13a>
    1d02:	41 10       	cpse	r4, r1
    1d04:	04 c0       	rjmp	.+8      	; 0x1d0e <HID_Device_USBTask+0x10a>
    1d06:	51 10       	cpse	r5, r1
    1d08:	02 c0       	rjmp	.+4      	; 0x1d0e <HID_Device_USBTask+0x10a>
    1d0a:	01 2b       	or	r16, r17
    1d0c:	c1 f0       	breq	.+48     	; 0x1d3e <HID_Device_USBTask+0x13a>
    1d0e:	f7 01       	movw	r30, r14
    1d10:	84 85       	ldd	r24, Z+12	; 0x0c
    1d12:	95 85       	ldd	r25, Z+13	; 0x0d
    1d14:	97 87       	std	Z+15, r25	; 0x0f
    1d16:	86 87       	std	Z+14, r24	; 0x0e
    1d18:	81 81       	ldd	r24, Z+1	; 0x01
    1d1a:	8f 70       	andi	r24, 0x0F	; 15
    1d1c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1d20:	8b 81       	ldd	r24, Y+3	; 0x03
    1d22:	81 11       	cpse	r24, r1
    1d24:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1d28:	69 81       	ldd	r22, Y+1	; 0x01
    1d2a:	7a 81       	ldd	r23, Y+2	; 0x02
    1d2c:	40 e0       	ldi	r20, 0x00	; 0
    1d2e:	50 e0       	ldi	r21, 0x00	; 0
    1d30:	c6 01       	movw	r24, r12
    1d32:	87 d9       	rcall	.-3314   	; 0x1042 <Endpoint_Write_Stream_LE>
    1d34:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1d38:	8e 77       	andi	r24, 0x7E	; 126
    1d3a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1d3e:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1d42:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    1d46:	f7 01       	movw	r30, r14
    1d48:	93 87       	std	Z+11, r25	; 0x0b
    1d4a:	82 87       	std	Z+10, r24	; 0x0a
    1d4c:	0f b6       	in	r0, 0x3f	; 63
    1d4e:	f8 94       	cli
    1d50:	9e be       	out	0x3e, r9	; 62
    1d52:	0f be       	out	0x3f, r0	; 63
    1d54:	8d be       	out	0x3d, r8	; 61
    1d56:	0f b6       	in	r0, 0x3f	; 63
    1d58:	f8 94       	cli
    1d5a:	be be       	out	0x3e, r11	; 62
    1d5c:	0f be       	out	0x3f, r0	; 63
    1d5e:	ad be       	out	0x3d, r10	; 61
    1d60:	0f 90       	pop	r0
    1d62:	0f 90       	pop	r0
    1d64:	0f 90       	pop	r0
    1d66:	df 91       	pop	r29
    1d68:	cf 91       	pop	r28
    1d6a:	1f 91       	pop	r17
    1d6c:	0f 91       	pop	r16
    1d6e:	ff 90       	pop	r15
    1d70:	ef 90       	pop	r14
    1d72:	df 90       	pop	r13
    1d74:	cf 90       	pop	r12
    1d76:	bf 90       	pop	r11
    1d78:	af 90       	pop	r10
    1d7a:	9f 90       	pop	r9
    1d7c:	8f 90       	pop	r8
    1d7e:	7f 90       	pop	r7
    1d80:	6f 90       	pop	r6
    1d82:	5f 90       	pop	r5
    1d84:	4f 90       	pop	r4
    1d86:	08 95       	ret

00001d88 <__tablejump2__>:
    1d88:	ee 0f       	add	r30, r30
    1d8a:	ff 1f       	adc	r31, r31
    1d8c:	05 90       	lpm	r0, Z+
    1d8e:	f4 91       	lpm	r31, Z
    1d90:	e0 2d       	mov	r30, r0
    1d92:	09 94       	ijmp

00001d94 <memcmp>:
    1d94:	fb 01       	movw	r30, r22
    1d96:	dc 01       	movw	r26, r24
    1d98:	04 c0       	rjmp	.+8      	; 0x1da2 <memcmp+0xe>
    1d9a:	8d 91       	ld	r24, X+
    1d9c:	01 90       	ld	r0, Z+
    1d9e:	80 19       	sub	r24, r0
    1da0:	21 f4       	brne	.+8      	; 0x1daa <memcmp+0x16>
    1da2:	41 50       	subi	r20, 0x01	; 1
    1da4:	50 40       	sbci	r21, 0x00	; 0
    1da6:	c8 f7       	brcc	.-14     	; 0x1d9a <memcmp+0x6>
    1da8:	88 1b       	sub	r24, r24
    1daa:	99 0b       	sbc	r25, r25
    1dac:	08 95       	ret

00001dae <memcpy>:
    1dae:	fb 01       	movw	r30, r22
    1db0:	dc 01       	movw	r26, r24
    1db2:	02 c0       	rjmp	.+4      	; 0x1db8 <memcpy+0xa>
    1db4:	01 90       	ld	r0, Z+
    1db6:	0d 92       	st	X+, r0
    1db8:	41 50       	subi	r20, 0x01	; 1
    1dba:	50 40       	sbci	r21, 0x00	; 0
    1dbc:	d8 f7       	brcc	.-10     	; 0x1db4 <memcpy+0x6>
    1dbe:	08 95       	ret

00001dc0 <memset>:
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	01 c0       	rjmp	.+2      	; 0x1dc6 <memset+0x6>
    1dc4:	6d 93       	st	X+, r22
    1dc6:	41 50       	subi	r20, 0x01	; 1
    1dc8:	50 40       	sbci	r21, 0x00	; 0
    1dca:	e0 f7       	brcc	.-8      	; 0x1dc4 <memset+0x4>
    1dcc:	08 95       	ret

00001dce <_exit>:
    1dce:	f8 94       	cli

00001dd0 <__stop_program>:
    1dd0:	ff cf       	rjmp	.-2      	; 0x1dd0 <__stop_program>
